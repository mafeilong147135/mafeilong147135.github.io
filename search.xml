<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jdk8 新特性</title>
      <link href="/2019/04/12/java-2019-04-12-jdk8-new-feature/"/>
      <url>/2019/04/12/java-2019-04-12-jdk8-new-feature/</url>
      
        <content type="html"><![CDATA[<h2 id="1-接口的默认方法和静态方法"><a href="#1-接口的默认方法和静态方法" class="headerlink" title="1.  接口的默认方法和静态方法"></a>1.  接口的默认方法和静态方法</h2><blockquote><p>​        jdk8新增的接口默认方法，接口可以有默认的实现方法。而不需要接口的实现类去实现该方法。我们只需要在方法前加上default关键字就可以了。</p></blockquote><h3 id="1-接口默认方法"><a href="#1-接口默认方法" class="headerlink" title="1. 接口默认方法"></a>1. 接口默认方法</h3><h4 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h4><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DefaultInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="2-为什么需要该特性？"><a href="#2-为什么需要该特性？" class="headerlink" title="2. 为什么需要该特性？"></a>2. 为什么需要该特性？</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>​        接口的好处是面向抽象而不是面向具体实现编程。但是如果我们在已有的接口新增接口方法，那么所有的实现类都需要去新增该方法的实现。比如上面的集合源码的foreach方法，在 jdk 8 之前的集合类中没有该方法。如果我们在该接口新增实现方法的话，就会改动之前版本的所有实现类。所以该特性是为了解决接口的修改和现有实现不兼容的情况出现。</p></blockquote><h4 id="3-多个接口默认方法"><a href="#3-多个接口默认方法" class="headerlink" title="3. 多个接口默认方法"></a>3. 多个接口默认方法</h4><p>​        在一个接口里面我们可以定义多个接口的默认方法。同时在接口的实现类我们可以不需要再去实现该方法。但是会继承该方法。我们也可以在实现类中去重写该方法。如果一个实现类C去实现了两个接口A、B，B接口继承了A接口。AB接口中都有同一个默认方法。实现类C所继承的默认方法会是最具体的那一个，也就是B接口的默认实现方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">DefaultInterfaceA</span> <span class="token punctuation">{</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method1 A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method2 A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">DefaultInterfaceB</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultInterfaceA</span> <span class="token punctuation">{</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method1 B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method2 B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ClassC</span> <span class="token keyword">implements</span> <span class="token class-name">DefaultInterfaceA</span><span class="token punctuation">,</span> DefaultInterfaceB <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ClassC classC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    classC<span class="token punctuation">.</span><span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// default method1 B</span>    classC<span class="token punctuation">.</span><span class="token function">print2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// default method2 B</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-接口不能提供对Object类的任何方法的默认实现"><a href="#4-接口不能提供对Object类的任何方法的默认实现" class="headerlink" title="4. 接口不能提供对Object类的任何方法的默认实现"></a>4. 接口不能提供对Object类的任何方法的默认实现</h4><p>​        每个类都默认是Object类的子类，也都继承了Object类的equals()、hashCode()、toString()等方法。根据类优先原则，在接口中定义Object类的方法是没有意思的。也不会被编译。</p><h3 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a>2. 静态方法</h3><p>​        jdk 8 可以申明一个和多个静态方法。但只能通过接口类调用接口中的静态方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStaticMethod</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DefaultStaticInterface<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// static method</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">DefaultStaticInterface</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-lambda表达式"><a href="#2-lambda表达式" class="headerlink" title="2. lambda表达式"></a>2. lambda表达式</h2><p>​        lambda表达式（也可称为闭包），是jdk8最重要的特性。lambda表达式允许把函数作为一个方法的参数。函数可作为参数传递进方法。使用lambda表达式可以使代码变得紧凑。</p><h3 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1. 语法"></a>1. 语法</h3><p>​       一个<code>Lambda</code>表达式可以由用逗号分隔的参数列表、<code>–&gt;</code>符号与函数体三部分表示。</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> expression<span class="token punctuation">;</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>expressions<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​      <strong>lambda的特征:</strong></p><ul><li><strong>可选类型申明</strong>：  可以不写出参数的类型，编译器会自动的识别参数类型。</li><li><strong>可选的参数括号</strong>：当只有一个参数的时候可以不写出参数括号。</li><li><strong>可选的执行语句大括号</strong>：当只有一句执行语句时，可以不需要大括号。</li><li><strong>可选的返回关键字</strong>：当只有一句执行语句同时没有大括号的时候，可以不加上返回的关键字。编译器会自动的返回值。</li></ul><h3 id="2-Lambda-表达式实例"><a href="#2-Lambda-表达式实例" class="headerlink" title="2.Lambda 表达式实例"></a>2.Lambda 表达式实例</h3><p>我们可以看一下两种不同的创建TreeSet的定制排序方式。</p><pre class=" language-java"><code class="language-java">    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> oldTreeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oldTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oldTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oldTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oldTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"oldTreeSet:"</span> <span class="token operator">+</span> oldTreeSet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// oldTreeSet:[4, 3, 2, 1]</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newTreeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> o2 <span class="token operator">-</span>o1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newTreeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"newTreeSet:"</span> <span class="token operator">+</span> newTreeSet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// newTreeSet:[4, 3, 2, 1]</span>  <span class="token punctuation">}</span></code></pre><p>其实在使用lambda表达式还可以更加的简洁。当只有一句执行语句时，可以不需要大括号。</p><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newTreeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>  o2 <span class="token operator">-</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同时编译器还可自动推导出参数的类型，我们还可以这样写。</p><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newTreeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>  o2 <span class="token operator">-</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-lambda只能引用final标记的外层局部变量"><a href="#3-lambda只能引用final标记的外层局部变量" class="headerlink" title="3.lambda只能引用final标记的外层局部变量"></a>3.lambda只能引用final标记的外层局部变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestLambdaFinal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     Multiply<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>param <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出结果为 2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Multiply</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">multiply</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 上面的代码如果我们去掉final的话，也是可以执行的，但是num被默认成的是final的变量。在之后的代码中就不能带num的值进行修改了。如果修改就会编译不通过。报Variable used in lambda expression should be final or effectively final的错误提示。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestLambdaFinal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Multiply<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>param <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Variable used in lambda expression should be final or effectively final</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Multiply</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">multiply</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同时在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。</p><pre class=" language-java"><code class="language-java">String param <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Multiply<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>param <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译会出错</span></code></pre><h2 id="3-函数式接口"><a href="#3-函数式接口" class="headerlink" title="3. 函数式接口"></a>3. 函数式接口</h2><p>​      <code>Lambda</code>表达式是如何在Java的类型系统中表示的呢？每一个Lambda表达式都对应一个类型，通常是接口类型。函数式接口就是只有一个抽象方法但是可以有多个默认实现方法的接口。如果不写上@FunctionalInterface也同样可以。JDK 1.8 新增加的函数接口：java.util.function 它包含了很多类，用来支持 Java的 函数式编程。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFunctionalInterface</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FunctionalInterfaceA<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> functionalInterfaceA <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">+</span> m<span class="token punctuation">;</span>    Integer add <span class="token operator">=</span> functionalInterfaceA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">FunctionalInterfaceA</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span>  T3<span class="token operator">></span> <span class="token punctuation">{</span>  T3 <span class="token function">multiply</span><span class="token punctuation">(</span>T1 i<span class="token punctuation">,</span> T2 m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是Object的public方法，不会编译所以没有报错</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-方法引用"><a href="#4-方法引用" class="headerlink" title="4. 方法引用"></a>4. 方法引用</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>方法引用是通过方法的名字来指向一个方法。它可以使代码更加紧凑，减少代码冗余。</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">,</span><span class="token string">"123123"</span><span class="token punctuation">,</span><span class="token string">"cfsd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在Java8中，我们可以直接通过方法引用来<strong>简写</strong>lambda表达式中已经存在的方法。</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">,</span><span class="token string">"123123"</span><span class="token punctuation">,</span><span class="token string">"cfsd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>简单地说，方法引用就是一个Lambda表达式。在Java 8中，我们会使用Lambda表达式创建匿名方法，但是有时候，我们的Lambda表达式可能仅仅调用一个已存在的方法，而不做任何其它事，对于这种情况，通过一个方法名字来引用这个已存在的方法会更加清晰，Java 8的方法引用允许我们这样做。方法引用是一个更加紧凑，易读的Lambda表达式，注意方法引用是一个Lambda表达式，其中方法引用的操作符是双冒号”::”。</p></blockquote><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareByAge</span><span class="token punctuation">(</span>Person a<span class="token punctuation">,</span> Person b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMethodReference</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//test();</span>    Person<span class="token punctuation">[</span><span class="token punctuation">]</span> pers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"mfl"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zym"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用匿名内部类</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>pers<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Person o1<span class="token punctuation">,</span> Person o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>pers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用lambda表达式和静态方法</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>pers<span class="token punctuation">,</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Person<span class="token punctuation">.</span><span class="token function">compareByAge</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>pers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用方法引用</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>pers<span class="token punctuation">,</span> Person<span class="token operator">:</span><span class="token operator">:</span>compareByAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>pers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h3 id="3-四种方法引用类型"><a href="#3-四种方法引用类型" class="headerlink" title="3. 四种方法引用类型"></a>3. 四种方法引用类型</h3><p>方法引用的标准形式是：<code>类名::方法名</code>。（<strong>注意：只需要写方法名，不需要写括号</strong>）</p><p>有以下四种形式的方法引用：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>引用静态方法</td><td>ContainingClass::staticMethodName</td></tr><tr><td>引用某个对象的实例方法</td><td>containingObject::instanceMethodName</td></tr><tr><td>引用某个类型的任意对象的实例方法</td><td>ContainingType::methodName</td></tr><tr><td>引用构造方法</td><td>ClassName::new</td></tr></tbody></table><h2 id="5-Stream"><a href="#5-Stream" class="headerlink" title="5. Stream"></a>5. Stream</h2><blockquote><p>jdk8 新增的Stream API 将生成环境的函数式编程引入了java库中，是目前为止对java最大的补充，使开发者写出更有效，更加简洁、紧凑的代码。Stream API 极大简化了对集合的操作。同时又不只是集合。</p></blockquote><h3 id="1-部分API"><a href="#1-部分API" class="headerlink" title="1. 部分API"></a>1. 部分API</h3><h4 id="1-生成流"><a href="#1-生成流" class="headerlink" title="1. 生成流"></a>1. 生成流</h4><p>在 Java 8 中, 集合接口有两个方法来生成流：<strong>stream() 和 parallelStream()</strong> </p><h4 id="2-map"><a href="#2-map" class="headerlink" title="2. map"></a>2. map</h4><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取对应的平方数 </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> squaresList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-filter"><a href="#4-filter" class="headerlink" title="4. filter"></a>4. filter</h4><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取空字符串的数量 </span><span class="token keyword">int</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-limit"><a href="#5-limit" class="headerlink" title="5. limit"></a>5. limit</h4><p>limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：</p><pre class=" language-java"><code class="language-java">Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不加上的话会一直打印下去</span></code></pre><h4 id="6-sorted"><a href="#6-sorted" class="headerlink" title="6. sorted"></a>6. sorted</h4><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：</p><pre class=" language-java"><code class="language-java">Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="7-并行（parallel）程序"><a href="#7-并行（parallel）程序" class="headerlink" title="7. 并行（parallel）程序"></a>7. 并行（parallel）程序</h4><p>parallelStream 是流并行处理程序的代替方法。以下实例我们使用 parallelStream 来输出空字符串的数量：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取空字符串的数量 </span><span class="token keyword">int</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里得到的并不一定是有序的，有可能是1,3,4,5,2,6,8,9,7。就forEach()这个操作来讲，如果平行处理时，希望最后顺序是按照原来Stream的数据顺序，那可以调用forEachOrdered()。例如：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEachOrdered</span><span class="token punctuation">(</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注意:</strong>如果forEachOrdered()中间有其他如filter()的中介操作，会试着平行化处理，然后最终forEachOrdered()会以原数据顺序处理，因此，使用forEachOrdered()这类的有序处理,可能会（或完全失去）失去平行化的一些优势，实际上中介操作亦有可能如此，例如sorted()方法。</p></blockquote><h4 id="8-Collectors"><a href="#8-Collectors" class="headerlink" title="8. Collectors"></a>8. Collectors</h4><p>Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span>strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"筛选列表: "</span> <span class="token operator">+</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 筛选列表: [abc, bc, efg, abcd, jkl]</span>String mergedString <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并字符串: "</span> <span class="token operator">+</span> mergedString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合并字符串: abc, bc, efg, abcd, jkl</span></code></pre><h4 id="9-统计"><a href="#9-统计" class="headerlink" title="9. 统计"></a>9. 统计</h4><p>另外，一些产生统计结果的收集器也非常有用。它们主要用于int、double、long等基本类型上，它们可以用来产生类似如下的统计结果。</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   IntSummaryStatistics stats <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最大的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最小的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有数之和 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-简单示例"><a href="#2-简单示例" class="headerlink" title="2. 简单示例"></a>2. 简单示例</h3><p>现在我们有一个叫TestStream的类和一个Status的枚举类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> Status status<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer point<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">TestStream</span><span class="token punctuation">(</span>Status status<span class="token punctuation">,</span> Integer point<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">TestStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Status <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> status<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span>Status status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Integer <span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> point<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPoint</span><span class="token punctuation">(</span>Integer point<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    TestStream that <span class="token operator">=</span> <span class="token punctuation">(</span>TestStream<span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> status <span class="token operator">==</span> that<span class="token punctuation">.</span>status <span class="token operator">&amp;&amp;</span>            Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> that<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"TestStream{"</span> <span class="token operator">+</span>            <span class="token string">"status="</span> <span class="token operator">+</span> status <span class="token operator">+</span>            <span class="token string">", point="</span> <span class="token operator">+</span> point <span class="token operator">+</span>            <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Status <span class="token punctuation">{</span>  OPEN<span class="token punctuation">,</span>CLOSE<span class="token punctuation">}</span></code></pre><p> 现在假设我们有个该类的集合。</p><pre class=" language-java"><code class="language-java">Collection<span class="token operator">&lt;</span>TestStream<span class="token operator">></span> testStreams <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestStream</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">TestStream</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">TestStream</span><span class="token punctuation">(</span>Status<span class="token punctuation">.</span>CLOSE<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​      现在我们要看OPEN状态的点数和为多少？在jdk8之前我们需要foreach循环testStreams集合。在循环的时候加上if判断。以前的写法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>TestStream testStream <span class="token operator">:</span> testStreams<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>Status<span class="token punctuation">.</span>OPEN <span class="token operator">==</span> testStream<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum <span class="token operator">+=</span> testStream<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 21</span></code></pre><p>但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> total <span class="token operator">=</span> testStreams<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Status<span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>TestStream<span class="token operator">:</span><span class="token operator">:</span>getPoint<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 21</span></code></pre><p>​       在这几步中，首先，testStreams集合被转换成steam表示；其次，在steam上的<strong>filter</strong>操作会过滤掉所有CLOSED的testStream；第三，<strong>mapToInt</strong>操作基于每个testStream实例的<strong>TestStream::getPoint</strong>方法将task流转换成IntStream；最后，通过<strong>sum</strong>方法计算总和，得出最后的结果。</p><p>​        Steam之上的操作可分为中间操作和晚期操作。中间操作会返回一个新的Steam——执行一个中间操作（例如<strong>filter</strong>）并不会执行实际的过滤操作，而是创建一个新的Steam，并将原Steam中符合条件的元素放入一个新创建的Steam。晚期操作（例如<strong>forEach</strong>或者<strong>sum</strong>或者<strong>max</strong>），会遍历Steam并得出结果或者附带结果；在执行晚期操作之后，Steam处理线已经处理完毕，就不能使用了。在几乎所有情况下，晚期操作都是立刻对Steam进行遍历。</p><p>​       在这里还有两个例子，如何计算集合中TestStream的点数在集合中所占的比重，具体处理的代码如下：</p><pre class=" language-java"><code class="language-java">Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> testStreams<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>testStream <span class="token operator">-</span><span class="token operator">></span> testStream<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>point <span class="token operator">-</span><span class="token operator">></span> point <span class="token operator">/</span> totalPoint<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>weigth <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>weigth <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> item <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [39.0%, 24.0%, 36.0%]</span></code></pre><p>​        对于一个集合，经常需要根据某些条件对其中的元素分组。利用steam提供的API可以很快完成这类任务，代码如下：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Status<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>TestStream<span class="token operator">>></span> map <span class="token operator">=</span> testStreams<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>TestStream<span class="token operator">:</span><span class="token operator">:</span>getStatus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {OPEN=[TestStream{status=OPEN, point=13}, TestStream{status=OPEN, point=8}], CLOSE=[TestStream{status=CLOSE, point=12}]}</span></code></pre><h2 id="6-optional"><a href="#6-optional" class="headerlink" title="6. optional"></a>6. optional</h2><blockquote><p>Java应用中最常见的bug就是空值异常。在Java 8之前，<a href="http://code.google.com/p/guava-libraries/" target="_blank" rel="noopener">Google Guava</a>引入了<strong>Optionals</strong>类来解决<strong>NullPointerException</strong>，从而避免源码被各种<strong>null</strong>检查污染，以便开发者写出更加整洁的代码。Java 8也将<strong>Optional</strong>加入了官方库。<strong>Optional</strong> 是个容器。它可以保存类型T的值或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。Optional 类的引入很好的解决空指针异常。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer nullValue <span class="token operator">=</span> null<span class="token punctuation">;</span>    Integer value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> optionalInteger <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>nullValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 进行了是否为空的判断</span>    Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果value为空就会报空指针异常</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和："</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>optionalInteger<span class="token punctuation">,</span> optional<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 和：10</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>Optional a<span class="token punctuation">,</span> Optional b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a参数不为空:"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a参数不为空:false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b参数不为空:"</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b参数不为空:true</span>    Integer value1 <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当a为空时返回回调函数返回的值</span>    Integer value3 <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当a为空时返回设置的值</span>    Integer value2 <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//值不能为空 否则报 new NoSuchElementException("No value present");</span>    <span class="token keyword">return</span> value1 <span class="token operator">+</span> value2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​       如果<code>Optional</code>类的实例为非空值的话，<code>isPresent()</code>返回<code>true</code>，否从返回<code>false</code>。为了防止Optional为空值，<code>orElseGet()</code>方法通过回调函数来产生一个默认值。<code>map()</code>函数对当前<code>Optional</code>的值进行转化，然后返回一个新的<code>Optional</code>实例。<code>orElse()</code>方法和<code>orElseGet()</code>方法类似，但是<code>orElse</code>接受一个默认值而不是一个回调函数。</p><h2 id="7-重复注解"><a href="#7-重复注解" class="headerlink" title="7. 重复注解"></a>7. 重复注解</h2><p>元注解是指注解的注解，包括@Retention @Target @Document @Inherited四种。</p><ol><li>@Retention: 定义注解的保留策略</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//注解仅存在于源码中，在class字节码文件中不包含</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得，</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注解会在class字节码文件中存在，在运行时可以通过反射获取到</span></code></pre><p>​        首先要明确生命周期长度 SOURCE &lt; CLASS &lt; RUNTIME ，所以前者能作用的地方后者一定也能作用。一般如果需要在运行时去动态获取注解信息，那只能用 RUNTIME 注解；如果要在编译时进行一些预处理操作，比如生成一些辅助代码，就用 CLASS注解；如果只是做一些检查性的操作，比如 @Override 和 @SuppressWarnings，则可选用 SOURCE 注解。</p><ol start="2"><li>@Target：定义注解的作用目标</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//接口、类、枚举、注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//字段、枚举的常量</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//方法</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//方法参数</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//构造函数</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>LOCAL_VARIABLE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//局部变量</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>PACKAGE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//包</span></code></pre><ol start="3"><li><p>@Document：说明该注解将被包含在javadoc中</p></li><li><p>@Inherited：说明子类可以继承父类中的该注解</p></li></ol><blockquote><p>重复注解机制本身必须用<code>@Repeatable</code>注解。事实上，这并不是语言层面上的改变，更多的是编译器的技巧，底层的原理保持不变。让我们看一个快速入门的例子：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRepeatingAnnotations</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Num<span class="token punctuation">[</span><span class="token punctuation">]</span> annotationsByType <span class="token operator">=</span> Numable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span>Num<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> annotationsByType<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>annotationsByType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// @Num(value=10) @Num(value=21)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>Nums<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Num</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span>@<span class="token keyword">interface</span> <span class="token class-name">Nums</span> <span class="token punctuation">{</span>  Num<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Num</span><span class="token annotation punctuation">@Num</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">Numable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>​       正如我们所见，这里的<strong>Num</strong>类使用@Repeatable(Num.class)注解修饰，而<strong>Nums</strong>是存放<strong>Num</strong>注解的容器，编译器尽量对开发者屏蔽这些细节。这样，<strong>Numable</strong>接口可以用两个<strong>Num</strong>注解注释（这里并没有提到任何关于Nums的信息）。另外，反射API提供了一个新的方法：<strong>getAnnotationsByType()</strong>，可以返回某个类型的重复注解，例如<code>Filterable.class.getAnnoation(Num.class)</code>将返回两个Num实例。</p><h2 id="8-新的时间API"><a href="#8-新的时间API" class="headerlink" title="8. 新的时间API"></a>8. 新的时间API</h2><blockquote><p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。</p><p>在旧版的 Java 中，日期时间 API 存在诸多问题，其中有：</p><ul><li><strong>非线程安全</strong> − java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。</li><li><strong>设计很差</strong> − Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计。</li><li><strong>时区处理麻烦</strong> − 日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。</li></ul><p>Java 8 在 <strong>java.time</strong> 包下提供了很多新的 API。以下为两个比较重要的 API：</p><ul><li><strong>Local(本地)</strong> − 简化了日期时间的处理，没有时区的问题。</li><li><strong>Zoned(时区)</strong> − 通过制定的时区处理日期时间。</li></ul><p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p></blockquote><h3 id="1-Clock"><a href="#1-Clock" class="headerlink" title="1. Clock"></a>1. Clock</h3><p><strong>Clock</strong>类使用时区来返回当前的纳秒时间和日期。<strong>Clock</strong>可以替代<strong>System.currentTimeMillis()</strong>和<strong>TimeZone.getDefault()</strong>。</p><pre class=" language-java"><code class="language-java">Clock clock <span class="token operator">=</span> Clock<span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clock<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得时间 2019-04-17T06:46:19.513Z</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clock<span class="token punctuation">.</span><span class="token function">getZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得当前时区 Asia/Shanghai</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clock<span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得时间戳 1555483579543</span></code></pre><h3 id="2-TimeZones"><a href="#2-TimeZones" class="headerlink" title="2. TimeZones"></a>2. TimeZones</h3><p>​        在新API中时区使用<code>ZoneId</code>来表示。时区可以使用静态方法<code>of</code>来获取。时区定义了到UTS时间的时间差，在<code>Instant</code>时间点对象到本地日期对象之间转换的时候是极其重要的。代码如下:</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到所有可用的时区</span>ZoneId zoneId1 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定时区</span>ZoneId zoneId2 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Brazil/East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定时区</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zoneId1<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ZoneRules[currentStandardOffset=+01:00]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zoneId2<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ZoneRules[currentStandardOffset=-03:00]</span></code></pre><h3 id="3-LocalTime"><a href="#3-LocalTime" class="headerlink" title="3. LocalTime"></a>3. LocalTime</h3><p>​     <strong>LocalTime</strong>则仅仅包含该日历系统中的时间部分。可以得到该时区额本地时间，还可以计算两个时区的时间差。LocalTime提供了多种工厂方法来简化对象的创建，包括解析时间字符串。代码如下:</p><pre class=" language-java"><code class="language-java">ZoneId zoneId1 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/Berlin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZoneId zoneId2 <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Brazil/East"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime now1 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zoneId1<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime now2 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>zoneId2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token keyword">long</span> hoursBetween <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> minutesBetween <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>now1<span class="token punctuation">,</span> now2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hoursBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// -4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minutesBetween<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// -299</span>LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前本地时间</span>LocalTime localTime1 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 13:32:32</span></code></pre><h3 id="4-LocalDate"><a href="#4-LocalDate" class="headerlink" title="4. LocalDate"></a>4. LocalDate</h3><p>   <strong>LocalDate</strong>仅仅包含ISO-8601日历系统中的日期部分。该对象值是不可变的，用起来和<code>LocalTime</code>基本一致。</p><pre class=" language-java"><code class="language-java">LocalDate today <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate tomorrow <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate yesterday <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate independenceDay <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>APRIL<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DayOfWeek dayOfWeek <span class="token operator">=</span> independenceDay<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// WEDNESDAY</span>LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2019-04-17</span>DateTimeFormatter germanFormatter <span class="token operator">=</span> DateTimeFormatter            <span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span>FormatStyle<span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withLocale</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>GERMAN<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate xmas <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"17.04.2019"</span><span class="token punctuation">,</span> germanFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xmas<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2019-04-17</span></code></pre><h3 id="5-LocalDateTime"><a href="#5-LocalDateTime" class="headerlink" title="5.LocalDateTime"></a>5.LocalDateTime</h3><p><code>LocalDateTime</code>同时表示了时间和日期，相当于前两节内容合并到一个对象上了。<code>LocalDateTime</code>和<code>LocalTime</code>还有<code>LocalDate</code>一样，都是不可变的。<code>LocalDateTime</code>提供了一些能访问具体字段的方法。代码如下:</p><pre class=" language-java"><code class="language-java">LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>APRIL<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DayOfWeek dayOfWeek <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// WEDNESDAY</span>Month month <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// APRIL</span></code></pre><p>只要附加上时区信息，就可以将其转换为一个时间点<code>Instant</code>对象，<code>Instant</code>时间点对象可以很容易的转换为老式的<code>java.util.Date</code>。代码如下:</p><pre class=" language-java"><code class="language-java">Instant instant <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date legacyDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>legacyDate<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Wed Apr 17 16:59:59 CST 2019</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux入门</title>
      <link href="/2019/04/11/linux-2019-04-11-linux-primer/"/>
      <url>/2019/04/11/linux-2019-04-11-linux-primer/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vi和vim的基本介绍"><a href="#1-vi和vim的基本介绍" class="headerlink" title="1  vi和vim的基本介绍"></a>1  vi和vim的基本介绍</h2><p>所有的 Linux 系统都会内建 vi 文本编辑器。</p><p>Vim 具有程序编辑的能力，可以看做是Vi的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>我们只需要掌握它的基本使用即可。</p><h3 id="1-1-LINUX操作系统VIM的安装和配置"><a href="#1-1-LINUX操作系统VIM的安装和配置" class="headerlink" title="1.1 LINUX操作系统VIM的安装和配置"></a>1.1 LINUX操作系统VIM的安装和配置</h3><h4 id="1-1-1-VIM的安装"><a href="#1-1-1-VIM的安装" class="headerlink" title="1.1.1 VIM的安装"></a>1.1.1 VIM的安装</h4><p>在命令行敲入“vi”后按”tab”键，可以看到目前系统中只安装了vi和vim.tiny。</p><p>vim是从VI发展而来的一个文本编辑器，功能更强大。而vim.tiny是vim的精简版，所以，安装vim势在必行。</p><p>centos系统：</p><p>普通用户下输入命令：yum -y install vim*</p><p>ubuntu系统：</p><p>普通用户下输入命令：sudo apt-get install vim-gtk</p><p>之后不需要任何操作，等待安装完成。安装完成之后，在命令行敲入vi，按“tab”键。可以看到，已经有vim命令的存在。安装成功。</p><h4 id="1-1-2-VIM的配置"><a href="#1-1-2-VIM的配置" class="headerlink" title="1.1.2 VIM的配置"></a>1.1.2 VIM的配置</h4><p>set nu                           // 在左侧行号</p><p>set tabstop                  //tab 长度设置为 4</p><p>set nobackup               //覆盖文件时不备份</p><p>set cursorline               //突出显示当前行</p><p>set ruler                       //在右下角显示光标位置的状态行</p><p>set autoindent             //自动缩进</p><h2 id="2-vim和vi的快捷键的使用"><a href="#2-vim和vi的快捷键的使用" class="headerlink" title="2  vim和vi的快捷键的使用"></a>2  vim和vi的快捷键的使用</h2><p>1) 拷贝当前行   yy , 拷贝当前行向下的5行  5yy，并粘贴 p。【快捷键在正常模式下使用】</p><p>2) 删除当前行  dd  , 删除当前行向下的5行 5dd</p><p>3) 在文件中查找某个单词 [命令模式下 /关键字 ， 回车 查找 ,  输入 n 就是查找下一个]</p><p>4) 设置文件的行号，取消文件的行号.[命令行下  : set nu 和  :set nonu]</p><p>5) 编辑 /etc/profile 文件，使用快捷键到底文档的最末行[G]和最首行[gg] 【正常模式下】</p><p>6) 在一个文件中输入 “hello” ,然后又撤销这个动作  u  【正常模式下】</p><p>7) 编辑  /etc/profile 文件，并将光标移动到  20行 shift+g</p><h2 id="3-开机、重启和用户登录注销"><a href="#3-开机、重启和用户登录注销" class="headerlink" title="3    开机、重启和用户登录注销"></a>3    开机、重启和用户登录注销</h2><h3 id="3-1-关机-amp-重启命令"><a href="#3-1-关机-amp-重启命令" class="headerlink" title="3.1     关机&amp;重启命令"></a>3.1     关机&amp;重启命令</h3><p>shutdown -h now [立刻关机]</p><p>shutdown -h  1   “1分钟，关机.”   [1分钟后，关机]</p><p>shutdown -r  now   [立刻重启]</p><p>shutdown -r  2  “2分钟后，重启”</p><p>halt  【立刻关机】</p><p>reboot  【立刻重启】</p><p>在重启和关机前，通常需要先执行</p><p>sync  [把内存的数据，写入磁盘]</p><p>注意细节：</p><p>不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</p><h3 id="3-2-用户的登录和注销"><a href="#3-2-用户的登录和注销" class="headerlink" title="3.2     用户的登录和注销"></a>3.2     用户的登录和注销</h3><p>1) 登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用”su - 用户名’命令来切换成系统管理员身份.</p><p>2) 在提示符下输入 logout 即可注销用户【不同的shell 可能不同(logout  exit)】</p><p>3 logout 注销指令在图形<strong>运行级别</strong>(简单提一下：<strong>0-6**</strong>个级别**)无效，在 运行级别 3下有效.</p><p>4) 运行级别这个概念，后面给大家介绍</p><h2 id="4-用户管理"><a href="#4-用户管理" class="headerlink" title="4   用户管理"></a>4   用户管理</h2><h3 id="4-1-基本介绍"><a href="#4-1-基本介绍" class="headerlink" title="4.1     基本介绍"></a>4.1     基本介绍</h3><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p><h3 id="4-2-添加用户"><a href="#4-2-添加用户" class="headerlink" title="4.2     添加用户"></a>4.2     添加用户</h3><p>基本语法</p><p>useradd  用户名</p><p>案例演示</p><p>添加一个用户 xiaoming : useradd xiaoming</p><p> 使用细节</p><p>1) 当创建用户成功后，会自动的创建和用户同名的家目录 【/home/xiaoming】</p><p>2) 也可以通过 useradd -d  指定目录   新的用户名jack，给新创建的用户指定家目录</p><h3 id="4-3-指定-修改密码"><a href="#4-3-指定-修改密码" class="headerlink" title="4.3     指定/修改密码"></a>4.3     指定/修改密码</h3><h4 id="4-3-1-基本语法"><a href="#4-3-1-基本语法" class="headerlink" title="4.3.1 基本语法"></a>4.3.1 基本语法</h4><p>passwd    用户名    如果没有带用户名，则是给当前登录的用户修改密码</p><h4 id="4-3-2-应用案例"><a href="#4-3-2-应用案例" class="headerlink" title="4.3.2 应用案例"></a>4.3.2 应用案例</h4><p>给xiaoming 指定密码</p><p>passwd xiaoming   需要root用户或自身才能修改</p><h3 id="4-4-删除用户"><a href="#4-4-删除用户" class="headerlink" title="4.4    删除用户"></a>4.4    删除用户</h3><h4 id="4-4-1-基本语法"><a href="#4-4-1-基本语法" class="headerlink" title="4.4.1 基本语法"></a>4.4.1 基本语法</h4><p>userdel   用户名</p><h4 id="4-4-2-应用案例"><a href="#4-4-2-应用案例" class="headerlink" title="4.4.2 应用案例"></a>4.4.2 应用案例</h4><p>删除用户xiaoming，但是要保留家目录  userdel 用户名  <strong>userdel xiaoming</strong></p><p>删除用户以及用户主目录    userdel –r  xiaoming 【小心使用】</p><h4 id="4-4-3-细节说明"><a href="#4-4-3-细节说明" class="headerlink" title="4.4.3 细节说明"></a>4.4.3 细节说明</h4><p>是否保留家目录的讨论？ [<strong>一般保留</strong>]</p><p> 查询用户信息指令</p><p>id  用户名</p><p>1) 当用户不存在时，返回无此用户 </p><h3 id="4-5-切换用户"><a href="#4-5-切换用户" class="headerlink" title="4.5     切换用户"></a>4.5     切换用户</h3><h4 id="4-5-1-介绍"><a href="#4-5-1-介绍" class="headerlink" title="4.5.1 介绍"></a>4.5.1 介绍</h4><p>在操作Linux中，如果当前用户的权限不够，可以通过 su - 指令，切换到高权限用户，比如root</p><h4 id="4-5-2-基本语法"><a href="#4-5-2-基本语法" class="headerlink" title="4.5.2 基本语法"></a>4.5.2 基本语法</h4><p>su  –  切换用户名</p><h4 id="4-5-3-细节说明"><a href="#4-5-3-细节说明" class="headerlink" title="4.5.3 细节说明"></a>4.5.3 细节说明</h4><p>1) 从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p><p>2) 当需要返回到原来用户时，使用exit指令</p><p>3) 如果 su – <strong>没有带用户名</strong>，则默认切换到root用户</p><h3 id="4-7-用户组"><a href="#4-7-用户组" class="headerlink" title="4.7   用户组"></a>4.7   用户组</h3><h4 id="4-7-1-介绍"><a href="#4-7-1-介绍" class="headerlink" title="4.7.1 介绍"></a>4.7.1 介绍</h4><p>类似于角色，系统可以对有共性的多个用户进行统一的管理。</p><h4 id="4-7-2-新增组"><a href="#4-7-2-新增组" class="headerlink" title="4.7.2 新增组"></a>4.7.2 新增组</h4><p>指令</p><p><strong>groupadd</strong> 组名   </p><h4 id="4-7-3-案例演示-增加-wudang-武当"><a href="#4-7-3-案例演示-增加-wudang-武当" class="headerlink" title="4.7.3 案例演示 [增加 wudang] 武当"></a>4.7.3 案例演示 [增加 wudang] 武当</h4><p>groupadd  wudang</p><h4 id="4-7-4-增加用户时直接加上组"><a href="#4-7-4-增加用户时直接加上组" class="headerlink" title="4.7.4 增加用户时直接加上组"></a>4.7.4 增加用户时直接加上组</h4><p>指令(基本语法)</p><p>useradd  –g 用户组 用户名</p><p>增加一个用户 zwj, 直接将他指定到 wudang   useradd -g wudang zwj</p><h4 id="4-7-5-删除组"><a href="#4-7-5-删除组" class="headerlink" title="4.7.5 删除组"></a>4.7.5 删除组</h4><p> 指令(基本语法)</p><p>​       groupdel 组名</p><p> 案例演示</p><p>这里有一个前提，就是这个组没有用户，才能删除。</p><h4 id="4-7-6-修改用户的组"><a href="#4-7-6-修改用户的组" class="headerlink" title="4.7.6 修改用户的组"></a>4.7.6 修改用户的组</h4><p>指令(基本语法)</p><p>usermod  –g 新的组名 用户名</p><p> 案例演示</p><p>创建一个shaolin组，让将zwj 用户修改到shaolin  usermod -g shaolin zwj</p><h3 id="4-8-用户和组的相关文件"><a href="#4-8-用户和组的相关文件" class="headerlink" title="4.8     用户和组的相关文件"></a>4.8     用户和组的相关文件</h3><h4 id="4-8-1-etc-passwd-文件"><a href="#4-8-1-etc-passwd-文件" class="headerlink" title="4.8.1 /etc/passwd 文件"></a>4.8.1 /etc/passwd 文件</h4><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell </p><h4 id="4-8-2-etc-shadow-文件"><a href="#4-8-2-etc-shadow-文件" class="headerlink" title="4.8.2  /etc/shadow 文件"></a>4.8.2  /etc/shadow 文件</h4><p>口令的配置文件</p><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:保留 </p><h4 id="4-8-3-etc-group-文件"><a href="#4-8-3-etc-group-文件" class="headerlink" title="4.8.3 /etc/group 文件"></a>4.8.3 /etc/group 文件</h4><p> 组(group)的配置文件，记录Linux包含的组的信息</p><p>每行含义：组名:口令:组标识号:组内用户列表</p><h2 id="5-实用指令"><a href="#5-实用指令" class="headerlink" title="5    实用指令"></a>5    实用指令</h2><h3 id="5-1-指定运行级别"><a href="#5-1-指定运行级别" class="headerlink" title="5.1     指定运行级别"></a>5.1     指定运行级别</h3><h4 id="5-1-1-基本介绍"><a href="#5-1-1-基本介绍" class="headerlink" title="5.1.1 基本介绍"></a>5.1.1 基本介绍</h4><p>运行级别说明：  </p><p>1) 0 ：关机 </p><p>2) 1 ：单用户 [类似安全模式， 这个模式可以帮助找回root密码]</p><p>3) 2：多用户状态没有网络服务</p><p>4) 3：多用户状态有网络服务 [<strong>使用最多</strong>]</p><p>5) 4：系统未使用保留给用户</p><p>6) 5：图形界面 【】</p><p>7) 6：系统重启  </p><p>常用运行级别是<strong>3</strong>和<strong>5</strong> ，要修改默认的运行级别可改文件</p><p>如果指定运行级别</p><p><strong>/etc/inittab</strong>的</p><p>id:<strong>5</strong>:initdefault:这一行中的数字</p><p>命令：init [012356]  https协议</p><p>应用实例：</p><p>案例： 通过init 来切换不同的运行级别，比如动 5-3 ， 然后关机</p><p>init  5</p><p>init  3</p><p>init  0</p><h3 id="5-2-指定运行级别"><a href="#5-2-指定运行级别" class="headerlink" title="5.2     指定运行级别"></a>5.2     指定运行级别</h3><p>1）如何找回root密码 </p><p>启动时-&gt;快速输入enter-&gt;输入e-&gt; 进入到编辑界面-&gt; 选择中间有kernel 项-&gt;<br> 输入e(edit)-&gt; 在该行的最后写入 1 [表示修改内核，临时生效]-&gt; 输入enter-&gt;<br> 输入b [boot]-&gt; 进入到单用模式 【这里就可以做补救工作】</p><p>2) 我们的 运行级别，linux 运行后，直接进入到 命令行终端(3级别)  </p><p>在<strong>/etc/inittab</strong>修改 id:<strong>5</strong>:initdefault:这一行中的数字为 id:<strong>3</strong>:initdefault:</p><h3 id="5-3-帮助指令"><a href="#5-3-帮助指令" class="headerlink" title="5.3     帮助指令"></a>5.3     帮助指令</h3><h4 id="5-3-1-man-获得帮助信息"><a href="#5-3-1-man-获得帮助信息" class="headerlink" title="5.3.1 man 获得帮助信息"></a>5.3.1 man 获得帮助信息</h4><p>基本语法</p><p>​       man 命令或配置文件</p><p> 应用实例</p><p>​       案例：查看ls命令的帮助信息</p><p>man ls</p><h4 id="5-3-2-help指令"><a href="#5-3-2-help指令" class="headerlink" title="5.3.2 help指令"></a>5.3.2 help指令</h4><p>基本语法</p><p>​       help 命令 （功能描述：获得shell内置命令的帮助信息）</p><p> 应用实例</p><p>​       案例：查看cd命令的帮助信息</p><p>help cd</p><h3 id="5-4-文件和目录相关的指令"><a href="#5-4-文件和目录相关的指令" class="headerlink" title="5.4     文件和目录相关的指令"></a>5.4     文件和目录相关的指令</h3><h4 id="5-4-1-pwd-指令"><a href="#5-4-1-pwd-指令" class="headerlink" title="5.4.1 pwd 指令"></a>5.4.1 pwd 指令</h4><p>基本语法</p><p>​       pwd      (功能描述：显示当前工作目录的绝对路径)</p><p>应用实例</p><p>​       案例：显示当前工作目录的绝对路径</p><p>演示：pwd </p><h4 id="5-4-2-ls指令"><a href="#5-4-2-ls指令" class="headerlink" title="5.4.2 ls指令"></a>5.4.2 ls指令</h4><p> 基本语法</p><p>​       ls  选项  目录或是文件</p><p>常用选项</p><p>​       -a ：显示当前目录所有的文件和目录，包括隐藏的 (文件名以.开头就是隐藏)。</p><p>​       -l  ：以列表的方式显示信息</p><p>​       -h  : 显示文件大小时，以 k , m, G单位显示</p><p>应用实例</p><p>​      案例:查看当前目录的所有内容信息</p><p>ls  -alh  显示当前的目录内容</p><p>ls  -alh  指定目录</p><p>比如：</p><p>  ls  -alh  /root/</p><h4 id="5-4-3-cd-指令"><a href="#5-4-3-cd-指令" class="headerlink" title="5.4.3 cd 指令"></a>5.4.3 cd 指令</h4><p>基本语法</p><p>​       cd  [参数]  (功能描述：切换到指定目录)</p><p>常用参数</p><p>​       <strong>绝对路径</strong>【从 / 开始定位】和<strong>相对路径</strong>【从当前的位置开始定位】 </p><p>​       cd ~  或者cd ：回到自己的家目录</p><p>​       cd ..  回到当前目录的上一级目录</p><p> 应用实例 </p><p>​      案例1：使用绝对路径切换到root目录  [cd /root]</p><p>​      案例2:  使用相对路径到/root 目录 [  cd ../root]</p><p>​      案例3：表示回到当前目录的上一级目录 [ cd ..]</p><p>​      案例4：回到家目录  [ cd ~ ]</p><h4 id="5-4-4-mkdir指令-make-directory"><a href="#5-4-4-mkdir指令-make-directory" class="headerlink" title="5.4.4 mkdir指令 [make directory]"></a>5.4.4 mkdir指令 [make directory]</h4><p>  说明</p><p>​      mkdir指令用于创建目录</p><p> 基本语法</p><p>​      mkdir  [选项]  要创建的目录</p><p> 常用选项</p><p>​      -p ：创建多级目录</p><p> 应用实例</p><p>案例1:创建一个目录 /home/dog<br>    mkdir  /home/dog</p><p>案例2:创建多级目录 /home/animal/tiger</p><p>mkdir  <strong>-p</strong>  /home/animal/tiger </p><h4 id="5-4-5-rmdir指令-remove-directory"><a href="#5-4-5-rmdir指令-remove-directory" class="headerlink" title="5.4.5 rmdir指令 [remove directory]"></a>5.4.5 rmdir指令 [remove directory]</h4><p> 说明</p><p>​      rmdir指令<strong>删除空目录</strong></p><p>基本语法</p><p>​      rmdir  [选项]  要删除的空目录</p><p> 应用实例</p><p>​      案例1:删除一个目录 /home/dog</p><p>​      rmdir  /home/dog  [要求 /home/dog 空目录]</p><p> 使用细节</p><p>​      rmdir 删除的是空目录，如果目录下有内容时无法删除的。</p><p>​      提示：如果需要删除非空目录，需要使用  rm -rf 要删除的目录</p><p>​      比如：</p><p>   rm -rf /home/dog </p><p>​      r: 表示递归删除，就是将该目录下的文件和子目录全部删除</p><p>​      f: 表示强制删除，就是不需询问</p><h4 id="5-4-6-touch指令"><a href="#5-4-6-touch指令" class="headerlink" title="5.4.6 touch指令"></a>5.4.6 touch指令</h4><p>touch指令创建空文件， 还可以更新文件的修改时间</p><p>  基本语法</p><p>​       touch 文件名称</p><p> 应用实例</p><p>​      案例1: 创建一个空文件 hello.txt</p><p>​      touch  hello.txt </p><p>​      说明：如果文件存在，则表示刷新该文件的修改时间.</p><p>cp指令[copy 拷贝]</p><h4 id="5-4-7-cp-指令拷贝文件到指定目录"><a href="#5-4-7-cp-指令拷贝文件到指定目录" class="headerlink" title="5.4.7 cp 指令拷贝文件到指定目录"></a>5.4.7 cp 指令拷贝文件到指定目录</h4><p>基本语法</p><p>​       cp [选项]  source【源】  dest【目的文件】</p><p>常用选项</p><p>​      -r ：递归复制整个文件夹</p><p>应用实例</p><p>​       案例1: 将 /home/aaa.txt 拷贝到  /home/bbb 目录下 cp /home/aaa.txt   /home/bbb.txt</p><p>​       案例2: 递归复制整个文件夹，举例， 将 /home 整个目录拷贝 /opt  cp -r /home/ /opt/</p><p>使用细节</p><p>​       强制覆盖不提示的方法：\cp</p><h4 id="5-4-8-rm指令"><a href="#5-4-8-rm指令" class="headerlink" title="5.4.8 rm指令"></a>5.4.8 rm指令</h4><p>rm 指令移除文件或目录</p><p>基本语法</p><p>​       rm  [选项]  要删除的文件或目录</p><p>常用选项</p><p>​      -r ：递归删除整个文件夹</p><p>​      -f ： 强制删除不提示</p><p>应用实例</p><p>​       案例1: 将 /home/aaa.txt 删除<br>​       rm  /home/aaa.txt</p><p>​       案例2: 递归删除整个文件夹 /home/bbb<br>​       rm –r  /home/bbb </p><p>使用细节</p><p>​       强制删除不提示的方法：带上 -f 参数即可</p><p>​      rm –rf  /home/bbb</p><h4 id="5-4-9-mv指令"><a href="#5-4-9-mv指令" class="headerlink" title="5.4.9 mv指令"></a>5.4.9 mv指令</h4><p>mv 移动文件与目录或重命名 </p><p>基本语法</p><p>​       mv  oldNameFile newNameFile     (功能描述：重命名)</p><p>​       mv /temp/movefile /targetFolder (功能描述：移动文件或目录)</p><p> 应用实例</p><p>​       案例1: 将 /home/aaa.txt 文件 重新命名为 pig.txt  mv aaa.txt  pig.txt   如果操作时两个文件在同一个目录下并且没有bbb.txt, 就是将aaa.txt重命名为pig.txt</p><h4 id="5-4-10-cat指令"><a href="#5-4-10-cat指令" class="headerlink" title="5.4.10      cat指令"></a>5.4.10      cat指令</h4><p>cat 查看文件内容 </p><p>基本语法</p><p>​       cat  [选项] 要查看的文件</p><p>常用选项</p><p>​      -n ：显示行号  </p><p>应用实例</p><p>​       案例1:   /ect/profile  文件内容，并显示行号</p><p>   cat  -n  /etc/profile  |   more</p><p>   说明：如果需要一行行，输入 enter </p><p>如果需要翻页 ，输入空格键.</p><p>如果需要退出，输入 q</p><p>使用细节</p><p>​       cat <strong>只能浏览文件，而不能修改文件</strong>，为了浏览方便，一般会带上 管道命令 | more</p><p>cat  xxx.txt | more  (把cat xxx.txt 输出结果交给 more 处理) </p><h4 id="5-4-11-more指令"><a href="#5-4-11-more指令" class="headerlink" title="5.4.11   more指令"></a>5.4.11   more指令</h4><p>more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键，详见操作说明</p><p> 基本语法</p><p>​       more 要查看的文件</p><p>操作说明</p><p>应用实例</p><p>​      案例: 采用more查看文件 </p><p>​      /etc/profile</p><p>快捷键</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻『一行』；</td></tr><tr><td>q</td><td>代表立刻离开   more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h4 id="5-4-12-less指令"><a href="#5-4-12-less指令" class="headerlink" title="5.4.12      less指令"></a>5.4.12      less指令</h4><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p>基本语法</p><p>​       less 要查看的文件</p><p>操作说明和快捷键</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键/[pagedown]</td><td>向下翻一页</td></tr><tr><td>pageup</td><td>向上翻一页</td></tr><tr><td>q/ ctrl + c</td><td>离开less程序</td></tr></tbody></table><p>应用实例</p><p>​      案例: 采用less查看一个</p><p>​      大文件文件 </p><h4 id="5-4-13-echo指令"><a href="#5-4-13-echo指令" class="headerlink" title="5.4.13      echo指令"></a>5.4.13      echo指令</h4><p> echo输出内容到控制台。</p><p>基本语法</p><p>​       echo   选项  输出内容</p><p>应用实例</p><p>​      案例: 使用echo 指令输出环境变量，比如 PATH</p><p>echo  $PATH</p><p>引出内容</p><p>查看系统的所有环境变量</p><p>env </p><p>修改环境变量</p><p>vi /etc/profile [系统的环境变量]</p><h4 id="5-4-14-head指令"><a href="#5-4-14-head指令" class="headerlink" title="5.4.14      head指令"></a>5.4.14      head指令</h4><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><p>基本语法</p><p>​       head 文件   (功能描述：查看文件头10行内容)</p><p>​       head -n 5 文件      (功能描述：查看文件头5行内容，5可以是任意行数)</p><p>应用实例</p><p>​      案例: 查看/etc/profile 的前面5行代码</p><p>​      head  -n  5   /etc/profile</p><h4 id="5-4-15-tail指令"><a href="#5-4-15-tail指令" class="headerlink" title="5.4.15    tail指令"></a>5.4.15    tail指令</h4><p> tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。</p><p>基本语法</p><p>​       1) tail  文件     （功能描述：查看文件头10行内容）</p><p>​       2) tail  -n 5 文件    （功能描述：查看文件头5行内容，5可以是任意行数）</p><p>​       3) tail  -f  文件       （功能描述：实时追踪该文档的所有更新） </p><h4 id="5-4-16-gt-指令-和-gt-gt-指令"><a href="#5-4-16-gt-指令-和-gt-gt-指令" class="headerlink" title="5.4.16      &gt; 指令 和 &gt;&gt; 指令"></a>5.4.16      &gt; 指令 和 &gt;&gt; 指令</h4><blockquote><p>输出重定向和 &gt;&gt; 追加</p></blockquote><p>基本语法</p><p>​     1) ls -l &gt;文件          （功能描述：列表的内容写入文件a.txt中（覆盖写））</p><p>​     2) ls -al &gt;&gt;文件             （功能描述：列表的内容追加到文件aa.txt的末尾）</p><p>​     3) cat 文件1 &gt; 文件2 （功能描述：将文件1的内容覆盖到文件2）</p><p>​     4) echo “内容”&gt;&gt; 文件</p><p> 应用实例</p><p>​      案例1: 将 /home 目录下的文件列表 写入到 /home/info.txt 中</p><p>​     <strong>ls</strong> –l  /home/   &gt;  /home/info.txt  [如果文件不存在，则会自动创建]</p><p>​      案例2: 将当前日历信息 追加到  /home/mycal 文件中 </p><p>​     date  &gt;&gt; /home/mycal</p><h4 id="5-4-17-ln-指令-link"><a href="#5-4-17-ln-指令-link" class="headerlink" title="5.4.17      ln 指令 (link)"></a>5.4.17      ln 指令 (link)</h4><p>  **软链接也成为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p><p><strong>基本语法</strong></p><p>​     ln -s 原文件或目录  软链接名（功能描述：给原文件创建一个软链接)</p><p><strong>应用实例</strong></p><p>​      案例1: 在/home 目录下创建一个软连接 linkToRoot，连接到/root目录</p><p>​      <strong>ln  -s  /root/  linkToRoot</strong></p><p>​      案例2: 删除软连接 <strong>linkToRoot</strong></p><p>​      rm –rf  linkToRoot </p><p><strong>细节说明</strong></p><p>   当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录。</p><h4 id="5-4-18-history指令"><a href="#5-4-18-history指令" class="headerlink" title="5.4.18       history指令"></a>5.4.18       history指令</h4><p>  查看已经执行过历史命令,也可以执行历史指令</p><p><strong>基本语法</strong></p><p>​     <strong>history</strong>      <strong>（功能描述：查看已经执行过历史命令）</strong></p><p><strong>应用实例</strong></p><p>​     案例1: 显示所有的历史命令</p><p><strong>history</strong>               </p><p>​     案例2: 显示最近使用过的10个指令。</p><p><strong>history 10</strong></p><p>   案例3: 执行历史编号为5的指令  !5</p><h3 id="5-5-时间日期类"><a href="#5-5-时间日期类" class="headerlink" title="5.5     时间日期类"></a>5.5     时间日期类</h3><h4 id="5-5-1-date指令-显示当前日期"><a href="#5-5-1-date指令-显示当前日期" class="headerlink" title="5.5.1 date指令-显示当前日期"></a>5.5.1 date指令-显示当前日期</h4><p>基本语法</p><p>​     1) date      （功能描述：显示当前时间）</p><p>​     2) date +%Y   （功能描述：显示当前年份）</p><p>​     3) date +%m   （功能描述：显示当前月份）</p><p>​     4) date +%d    （功能描述：显示当前是哪一天）</p><p>​     5) date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒）</p><p>应用实例</p><p>​      案例1: 显示当前时间信息</p><p>date</p><p>​      案例2: 显示当前时间年月日 </p><p>date  “%Y-%m-%d”</p><p>​      案例3: 显示当前时间年月日时分秒</p><p>date  “%Y-%m-%d %H:%M:%S”</p><h4 id="5-5-2-使用date指令设置最新时间"><a href="#5-5-2-使用date指令设置最新时间" class="headerlink" title="5.5.2 使用date指令设置最新时间"></a>5.5.2 使用date指令设置最新时间</h4><p>基本语法</p><p>​      date  -s  字符串时间</p><p> 应用实例</p><p>​      案例1: 设置系统当前时间 ， 比如设置成 2020-11-11 11:22:22      date -s “2020-11-11 11:22:22”</p><h4 id="5-5-3-cal指令"><a href="#5-5-3-cal指令" class="headerlink" title="5.5.3 cal指令"></a>5.5.3 cal指令</h4><p><strong>查看日历指令</strong></p><p><strong>基本语法</strong></p><p>​      <strong>cal  选项 （功能描述：不加选项，显示本月日历）</strong></p><p><strong>应用实例</strong></p><p>​      <strong>案例1: 显示当前日历</strong></p><p><strong>cal</strong>  </p><p>​      <strong>案例2:  显示2020年日历</strong></p><p><strong>cal  2020</strong></p><h3 id="5-6-搜索查找类"><a href="#5-6-搜索查找类" class="headerlink" title="5.6     搜索查找类"></a>5.6     搜索查找类</h3><h4 id="5-6-1-find指令"><a href="#5-6-1-find指令" class="headerlink" title="5.6.1 find指令"></a>5.6.1 find指令</h4><p>  <strong>find</strong>指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端</p><p><strong>基本语法</strong></p><p>​      <strong>find  [搜索范围</strong>]  <strong>[选项]</strong></p><p><strong>选项说明</strong></p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image102.jpg" alt="img"></p><p> <strong>应用实例</strong></p><p>​      <strong>案例1: 按文件名：根据名称查找/home目录下的hello.txt文件</strong></p><p>​      <strong>find  /home   -name  hello.txt</strong> </p><p>​     案例2：按拥有者：查找/opt目录下，用户名称为 nobody的文件       <strong>find  /opt    -user  nobody</strong></p><p>​      案例3：查找整个linux系统下大于10M的文件<strong>（+n 大于  -n小于   n等于)</strong></p><p>​      <strong>find   /  -size   +10M</strong></p><h4 id="5-6-2-locate指令"><a href="#5-6-2-locate指令" class="headerlink" title="5.6.2 locate指令"></a>5.6.2 locate指令</h4><p><strong>说明</strong>  </p><p><strong>locate</strong>指令可以快速定位文件路径。<strong>locate</strong>指令利用事先建立的系统中所有文件名称及路径的<strong>locate</strong>数据库实现快速定位给定的文件。<strong>Locate</strong>指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新<strong>locate</strong>时刻。</p><p><strong>基本语法</strong></p><p>​      <strong>locate</strong> <strong>搜索文件</strong></p><p> <strong>特别说明</strong></p><p>由于<strong>locate</strong>指令基于数据库进行查询，所以第一次运行前，必须使用<strong>updatedb</strong>指令创建<strong>locate</strong>数据库。</p><p>注意：如果没有locate指令的话，需要：</p><ol><li>执行一下命令安装以后就可以locate XXX了</li><li>yum install mlocate</li><li>sudo updatedb</li><li>locate  *.doc</li></ol><p><strong>应用实例</strong></p><p>​      案例1: 请使用<strong>locate </strong>指令快速定位hello.txt文件所在目录 locate hello.txt</p><h4 id="5-6-3-grep指令和-管道符号"><a href="#5-6-3-grep指令和-管道符号" class="headerlink" title="5.6.3 grep指令和 管道符号 |"></a>5.6.3 grep指令和 管道符号 |</h4><p> 说明</p><p> <strong>grep</strong> <strong>过滤查找</strong> <strong>，</strong> 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><p> <strong>基本语法</strong></p><p>​      grep 选项 查找内容 源文件</p><p> <strong>常用选项</strong></p><p>​    cat  a.txt | grep -ni yes              -n 表示显示查找到的行号  -i表示忽略大小写。</p><p>​    grep -ni yes a.txt</p><p>  <strong>应用实例</strong></p><p>​      <strong>案例</strong>1:请在 <strong>/etc/profile</strong> 文件中，查找  <strong>“if”</strong>  所在行，并且显示行号</p><p>​         <strong>grep</strong> –n   if  /etc/profile  [<strong>在/etc/profile</strong> 中查找 <strong>if</strong> ,并显示行，区别大小写]</p><p>​         <strong>grep</strong> <strong>–</strong>ni   if  /etc/profile  [<strong>在/etc/profile</strong>中查找 <strong>if ,</strong>并显示行，不区别大小写]</p><p>案例2: 配合管道 | 使用案例，查看当前服务器有没有 sshd 服务在监听</p><p>netstat -anp | grep sshd</p><h3 id="5-7-压缩和解压类"><a href="#5-7-压缩和解压类" class="headerlink" title="5.7   压缩和解压类"></a>5.7   压缩和解压类</h3><h4 id="5-7-1-gzip-gunzip-指令"><a href="#5-7-1-gzip-gunzip-指令" class="headerlink" title="5.7.1 gzip/gunzip 指令"></a>5.7.1 gzip/gunzip 指令</h4><p> gzip 用于压缩文件， gunzip 用于解压的</p><p>基本语法</p><p>​      gzip 文件    （功能描述：压缩文件，只能将文件压缩为*.gz文件）</p><p>​      gunzip 文件.gz   （功能描述：解压缩文件命令）   </p><p> 应用实例</p><p>​      案例1: gzip压缩， 将 /home下的 hello.txt文件进行压缩      gzip hello.txt</p><p>​      案例2: gunzip压缩， 将 /home下的 hello.txt.gz 文件进行解压缩       gunzip hello.txt.gz</p><h4 id="5-7-2-zip-unzip-指令"><a href="#5-7-2-zip-unzip-指令" class="headerlink" title="5.7.2 zip/unzip 指令"></a>5.7.2 zip/unzip 指令</h4><p><strong>zip</strong> <strong>用于压缩文件，</strong> <strong>unzip</strong> <strong>用于解压的，这个在项目打包发布中很有用的</strong></p><p>Linux系统没有自带的压缩解压工具；需要我们自己安装；当用到zip或者unzip如果没有安装就会出现unzip: Command Not Found 或 zip: Command Not Found;出现这个是因为没有安装unzip和zip；</p><h5 id="1、ubuntu-apt-get安装"><a href="#1、ubuntu-apt-get安装" class="headerlink" title="1、ubuntu apt-get安装"></a>1、ubuntu apt-get安装</h5><p>   apt-get install zip</p><h5 id="2、centOS-yum安装"><a href="#2、centOS-yum安装" class="headerlink" title="2、centOS yum安装"></a>2、centOS yum安装</h5><p>yum install -y unzip zip  </p><p><strong>基本语法</strong></p><p>​      zip      [选项] XXX.zip  <strong>需要压缩的内容（功能描述：压缩文件和目录的命令）</strong></p><p>​      unzip [选项] XXX.zip<strong>（功能描述：解压缩文件）</strong></p><p><strong>zip </strong>常用选项</p><p>​      <strong>-r</strong>：递归压缩，即压缩目录</p><p> <strong>unzip</strong>的常用选项</p><p>​     -d&lt;目录<strong>&gt; </strong>：指定解压后文件的存放目录</p><p><strong>应用实例</strong></p><p>​      <strong>案例1</strong>: 将 /home下的 所有文件进行压缩成 <strong>mypackage.zip</strong>  [退出home]</p><p>​      zip  -r   mypackage.zip  /home/</p><p>​      <strong>案例2:</strong>  将 <strong>mypackge.zip</strong> 解压到 <strong>/opt/tmp</strong> 目录下</p><p>​      unzip <strong>–</strong>d  /opt/tmp  mypackage.zip   [如果/opt/tmp 不存在，会自动创建]</p><h4 id="5-7-3-tar-指令"><a href="#5-7-3-tar-指令" class="headerlink" title="5.7.3 tar 指令"></a>5.7.3 tar 指令</h4><p><strong>基本说明</strong></p><p> <strong>tar</strong> <strong>指令</strong> <strong>是打包指令，最后打包后的文件是</strong> <strong>.tar.gz</strong> <strong>的文件。</strong> [可以压缩，和解压]</p><p><strong>基本语法</strong></p><p>tar  [选项]  XXX.tar.gz 打包的内容/目录 (功能描述：打包目录，压缩后的文件格式.tar.gz)</p><p><strong>选项说明</strong></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解压.tar文件</td></tr></tbody></table><p>一般打包用 tar -zcvf ;   解压用 tar -zxvf </p><p> <strong>应用实例</strong></p><p>案例1:    压缩多个文件，将 /home/a1.txt 和 /home/a2.txt 压缩成  a.tar.gz    </p><p>​       tar  -zcvf  a.tar.gz  a1.txt  a2.txt  [注意，路径要写清楚]</p><p> 案例2:  将/home的文件夹 压缩成 <strong>myhome.tar.gz</strong></p><p>   tar  -zcvf   myhome.tar.gz   /home/ [注意，路径写清楚]</p><p>  案例3:将 a.tar.gz 解压到当前目录</p><p>   tar -zxvf  a.tar.gz</p><p>案例4: 将myhome.tar.gz  解压到 /opt/tmp2目录下【-C】</p><p>​      tar -zxvf myhome.tar.gz  -C  /opt/tmp2  注意; /opt/tmp2事先需要创建好</p><h2 id="6-组管理和权限管理"><a href="#6-组管理和权限管理" class="headerlink" title="6   组管理和权限管理"></a>6   组管理和权限管理</h2><h3 id="6-1-Linux组基本介绍"><a href="#6-1-Linux组基本介绍" class="headerlink" title="6.1     Linux组基本介绍"></a>6.1     Linux组基本介绍</h3><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件</p><p>有所有者、所在组、其它组的概念。</p><p>1) 所有者</p><p>2) 所在组</p><p>3) 其它组</p><p>4) 改变用户所在的组</p><p>示意图：</p><p><img src="image/1539173402314.png" alt="1539173402314"></p><h3 id="6-2-文件-目录的所有者"><a href="#6-2-文件-目录的所有者" class="headerlink" title="6.2     文件/目录的所有者"></a>6.2     文件/目录的所有者</h3><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。</p><h4 id="6-2-1-查看文件的所有者"><a href="#6-2-1-查看文件的所有者" class="headerlink" title="6.2.1 查看文件的所有者"></a>6.2.1 查看文件的所有者</h4><p>指令：ls –ahl</p><p>应用实例 :创建一个组police,再创建一个用户tom,将tom放在police组 ,然后使用 tom来创建一个文件 ok.txt，看看情况如何</p><p> <img src="image/1539172319335.png" alt="1539172319335"></p><h4 id="6-2-2-修改文件所有者"><a href="#6-2-2-修改文件所有者" class="headerlink" title="6.2.2 修改文件所有者"></a>6.2.2 修改文件所有者</h4><p>指令：chown 用户名 文件名 </p><p> 应用案例</p><p>​      要求：使用root 创建一个文件apple.txt ，然后将其所有者修改成 tom  </p><p><img src="image/1539172534398.png" alt="1539172534398"></p><p> 一个文件的所有者是tom。 但是这个文件不一定是tom所在的组</p><h3 id="6-3-文件-目录的所在组"><a href="#6-3-文件-目录的所在组" class="headerlink" title="6.3     文件/目录的所在组"></a>6.3     文件/目录的所在组</h3><h4 id="6-3-1-修改文件所在的组"><a href="#6-3-1-修改文件所在的组" class="headerlink" title="6.3.1 修改文件所在的组"></a>6.3.1 修改文件所在的组</h4><p> 基本指令</p><p>chgrp 组名 文件名</p><p> 应用实例</p><p>使用root用户创建文件 orange.txt ,看看当前这个文件属于哪个组【root】，然后将这个文件所在组，修改到 police组。</p><ol><li><p>touch orange.txt</p></li><li><p>chgrp  police  orange.txt </p></li></ol><p><img src="image/1539172838742.png" alt="1539172838742"></p><h4 id="6-3-2-改变用户所在组"><a href="#6-3-2-改变用户所在组" class="headerlink" title="6.3.2 改变用户所在组"></a>6.3.2 改变用户所在组</h4><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组。</p><p> 改变用户所在组</p><p> 1) usermod   –g   组名  用户名</p><p> 2) usermod   –d   目录名  用户名  改变该用户登陆的初始目录。</p><p>应用实例</p><p>创建一个土匪组（bandit）将 tom 这个用户从原来所在的police组，修改到 bandit(土匪) 组</p><p><strong>Usermod  -g  bandit  tom</strong></p><p> <img src="image/1539173280573.png" alt="1539173280573"></p><h3 id="6-4-权限的基本介绍"><a href="#6-4-权限的基本介绍" class="headerlink" title="6.4     权限的基本介绍"></a>6.4     权限的基本介绍</h3><p><img src="image/1539173847374.png" alt="1539173847374"></p><p><img src="image/1539173361634.png" alt="1539173361634"></p><h3 id="6-5-rwx权限详解"><a href="#6-5-rwx权限详解" class="headerlink" title="6.5     rwx权限详解"></a>6.5     rwx权限详解</h3><p><img src="image/1539174109185.png" alt="1539174109185"></p><h3 id="6-6-修改权限-chmod"><a href="#6-6-修改权限-chmod" class="headerlink" title="6.6     修改权限-chmod"></a>6.6     修改权限-chmod</h3><p><img src="image/1539174985379.png" alt="1539174985379"></p><p> <img src="image/1539175594856.png" alt="1539175594856"></p><p><img src="image/1539175686868.png" alt="1539175686868"></p><p><img src="image/1539175795336.png" alt="1539175795336"></p><p><img src="image/1539175015643.png" alt="1539175015643"></p><p><img src="image/1539175978948.png" alt="1539175978948"></p><h3 id="6-7-修改文件所有者-chown"><a href="#6-7-修改文件所有者-chown" class="headerlink" title="6.7     修改文件所有者-chown"></a>6.7     修改文件所有者-chown</h3><p>9.7.1 基本介绍</p><p>chown  newowner  file  改变文件的所有者</p><p>chown  newowner:newgroup  file  改变用户的所有者和所有组</p><p>-R   如果是目录 则使其下所有子文件或目录递归生效</p><p>案例演示：</p><p>1) 请将 /home/abc.txt 文件的所有者修改成 tom<br>        chown   tom  /home/abc.txt</p><p><img src="image/1539176168104.png" alt="1539176168104"></p><p>2) 请将 /home/kkk 目录下所有的文件和目录的所有者都修改成tom<br>        chown –R tom  /home/kkk  或者  chown tom –R   /home/kkk</p><p>3) 将home下的所有文件和目录的所有者都改成 tom，将所在组改成police<br>        chown –R  tom:police   /home/   或者   chown tom:police –R    /home/</p><h3 id="6-8-修改文件所在组-chgrp"><a href="#6-8-修改文件所在组-chgrp" class="headerlink" title="6.8     修改文件所在组-chgrp"></a>6.8     修改文件所在组-chgrp</h3><h4 id="6-8-1-基本介绍"><a href="#6-8-1-基本介绍" class="headerlink" title="6.8.1 基本介绍"></a>6.8.1 基本介绍</h4><p>chgrp newgroup file  改变文件的所有组</p><h4 id="6-8-2-案例演示"><a href="#6-8-2-案例演示" class="headerlink" title="6.8.2 案例演示"></a>6.8.2 案例演示</h4><p>1) 请将 /home/abc .txt 文件的所在组修改成 shaolin (少林)<br>        chgrp  shaolin  /home/abc.txt</p><p>2) 请将 /home/kkk 目录下所有的文件和目录的所在组都修改成 shaolin(少林)<br>        chgrp  -R  shaolin /home/kkk </p><h3 id="6-9-最佳实践-警察和土匪游戏"><a href="#6-9-最佳实践-警察和土匪游戏" class="headerlink" title="6.9     最佳实践-警察和土匪游戏"></a>6.9     最佳实践-警察和土匪游戏</h3><p>police ， bandit </p><p>jack, jerry: 警察</p><p>xh, xq: 土匪</p><p>1) 创建组 </p><p>groupadd  police</p><p>groupadd  bandit</p><p>2) 创建用户 </p><p>useradd  -g police jack</p><p>useradd  -g police jerry</p><p>useradd  -g bandit xh</p><p>useradd  -g bandit xq</p><p>给分配密码</p><p>3) jack 创建一个文件jack.txt，自己可以读写，本组人可以读，其它组没人任何权限</p><p>登录后</p><p>chmod  640  jack.txt</p><p><strong>提醒</strong>：如果我们希望同组的人可以读 jack.txt 文件，则需要将 jack 的家目录的权限打开.</p><p>chmod  g=rx  /home/jack</p><p>4) jack 修改该文件，让其它组人可以读, 本组人可以读写</p><p>chmod  g=rw, o=r  jack.txt</p><p>5) xh 投靠 警察，看看是否可以读写.(测试后，是ok, 注意需要重新登录)</p><p>usermod  -g police xh</p><h3 id="6-10-课后练习"><a href="#6-10-课后练习" class="headerlink" title="6.10 课后练习"></a>6.10 课后练习</h3><p><img src="image/1539603664891.png" alt="1539603664891"></p><h2 id="7-定时任务调度"><a href="#7-定时任务调度" class="headerlink" title="7   定时任务调度"></a>7   定时任务调度</h2><h3 id="7-1-crond-任务调度"><a href="#7-1-crond-任务调度" class="headerlink" title="7.1 crond 任务调度"></a>7.1 crond 任务调度</h3><p>crontab 进行 定时任务的设置。</p><h4 id="7-1-1-概述"><a href="#7-1-1-概述" class="headerlink" title="7.1.1   概述"></a>7.1.1   概述</h4><p>​      任务调度：是指系统在某个时间执行的特定的命令或程序。 </p><p>​      任务调度分类：1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等</p><p>​       2.个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。</p><h4 id="7-1-2-基本语法"><a href="#7-1-2-基本语法" class="headerlink" title="7.1.2   基本语法"></a>7.1.2   基本语法</h4><p>​      crontab [选项]</p><h4 id="7-1-3-常用选项"><a href="#7-1-3-常用选项" class="headerlink" title="7.1.3   常用选项"></a>7.1.3   常用选项</h4><p><img src="image/1539603863048.png" alt="1539603863048"></p><p><strong>注意:</strong> service crond restart 重启任务调度</p><h4 id="7-1-4-快速入门"><a href="#7-1-4-快速入门" class="headerlink" title="7.1.4   快速入门"></a>7.1.4   快速入门</h4><p>​      设置任务调度文件：/etc/crontab</p><p>​      设置个人任务调度。执行crontab –e  命令。</p><p>​       接着输入任务到调度文件<br>​               如：<strong><em>/1 \</em> <em> </em> * ls</strong> <strong>–l  /etc/ &gt; /tmp/to.txt</strong>   </p><p>​       意思说每小时的每分钟执行 ls –l /etc/ &gt; /tmp/to.txt命令</p><h4 id="7-1-5-参数细节说明"><a href="#7-1-5-参数细节说明" class="headerlink" title="7.1.5   参数细节说明"></a>7.1.5   参数细节说明</h4><p><img src="image/1539604464800.png" alt="1539604464800"></p><p><img src="image/1539604486753.png" alt="1539604486753"></p><p><img src="image/1539604519216.png" alt="1539604519216"></p><h4 id="7-1-6-应用实例"><a href="#7-1-6-应用实例" class="headerlink" title="7.1.6    应用实例"></a>7.1.6    应用实例</h4><p>1) 案例1：每隔1分钟，就将当前的日期信息，追加到 /tmp/mydate.log 文件中<br> <em>/1 </em> <em> </em> *  date &gt;&gt; /tmp/mydate.log</p><p><img src="image/1539604855019.png" alt="1539604855019"></p><p>案例2：每隔1分钟， 将当前日期和日历都追加到 /home/mycal.log 文件中 </p><p><img src="image/1539606047893.png" alt="1539606047893"></p><p>注意： 一定给 sh 脚本的执行权限.</p><p><img src="image/1539606082285.png" alt="1539606082285"></p><p>案例3:    每天凌晨2:00 将mysql数据库 testdb ，备份到文件中。</p><p>步骤：1， 首先编写一个 脚本 backupdb.sh</p><p>​     /usr/local/mysql/bin/mysqldump -u root -p root testdb &gt; /tmp/mydb.bak</p><p> 步骤2: 给 /home/backupdb.sh 一个可以执行的权限</p><p>chmod  u+x backupdb.sh</p><p>步骤3:  将backupdb.sh 部署到crontab </p><p>crontab -e </p><p>增加</p><p>* 2 <em> </em> *  /home/backupdb.sh </p><p>到此ok!</p><h2 id="8-Linux磁盘分区、挂载"><a href="#8-Linux磁盘分区、挂载" class="headerlink" title="8      Linux磁盘分区、挂载"></a>8      Linux磁盘分区、挂载</h2><h3 id="8-1-分区的基本知识"><a href="#8-1-分区的基本知识" class="headerlink" title="8.1 分区的基本知识"></a>8.1 分区的基本知识</h3><h4 id="8-1-1-分区的方式"><a href="#8-1-1-分区的方式" class="headerlink" title="8.1.1      分区的方式"></a>8.1.1      分区的方式</h4><p>mbr分区:</p><p>1.最多支持四个主分区</p><p>2.系统只能安装在主分区</p><p>3.扩展分区要占一个主分区</p><p>4.MBR最大只支持2TB，但拥有最好的兼容性</p><p>gtp分区:</p><p>1.支持无限多个主分区（但操作系统可能限制，比如 windows下最多128个分区）</p><p>2.最大支持18EB的大容量（1EB=1024 PB，1PB=1024 TB ）</p><p>3.windows7 64位以后支持gtp</p><h4 id="8-1-2-windows下的磁盘分区"><a href="#8-1-2-windows下的磁盘分区" class="headerlink" title="8.1.2      windows下的磁盘分区"></a>8.1.2      windows下的磁盘分区</h4><p><img src="image/1540207264532.png" alt="1540207264532"></p><p> 我的电脑—-&gt;管理———&gt;磁盘管理</p><p><img src="image/1540207286853.png" alt="1540207286853"></p><h3 id="8-2-Linux分区"><a href="#8-2-Linux分区" class="headerlink" title="8.2 Linux分区"></a>8.2 Linux分区</h3><h4 id="8-2-1-原理介绍"><a href="#8-2-1-原理介绍" class="headerlink" title="8.2.1    原理介绍"></a>8.2.1    原理介绍</h4><p>​      Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构 , Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>​      Linux采用了一种叫“<strong>载入(mount)</strong>”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p> 示意图【分区和文件目录】</p><p>  <img src="image/1540208147290.png" alt="1540208147290"></p><h4 id="8-2-2-硬盘说明"><a href="#8-2-2-硬盘说明" class="headerlink" title="8.2.2      硬盘说明"></a>8.2.2      硬盘说明</h4><p>​     Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</p><p>​     对于IDE硬盘，驱动器标识符为“hdx~”,其中“hd”表明分区所在设备的类型，这里是指IDE硬盘了。“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）,“~”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例，hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区,hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。 </p><p>​       对于SCSI硬盘则标识为“sdx~”，SCSI硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。sdb1 [表示第2块scsi 硬盘的第1个分区]</p><p><img src="image/1540208189705.png" alt="1540208189705"></p><h4 id="8-2-3-查看所有设备-光驱-media，u盘，-硬盘-挂载情况"><a href="#8-2-3-查看所有设备-光驱-media，u盘，-硬盘-挂载情况" class="headerlink" title="8.2.3      查看所有设备(光驱 /media，u盘， 硬盘)挂载情况"></a>8.2.3      查看所有设备(光驱 /media，u盘， 硬盘)挂载情况</h4><p>命令 ：lsblk  或者 lsblk -f        </p><p><img src="image/1540208300176.png" alt="1540208300176"></p><h3 id="8-3-挂载的经典案例"><a href="#8-3-挂载的经典案例" class="headerlink" title="8.3 挂载的经典案例"></a>8.3 挂载的经典案例</h3><h4 id="8-3-1-说明"><a href="#8-3-1-说明" class="headerlink" title="8.3.1   说明"></a>8.3.1   说明</h4><p>我们以增加一块硬盘<strong>1G</strong> 为例来熟悉下磁盘的相关指令和深入理解磁盘分区、挂载、卸载的概念</p><h4 id="8-3-2-增加一块硬盘的步骤"><a href="#8-3-2-增加一块硬盘的步骤" class="headerlink" title="8.3.2      增加一块硬盘的步骤"></a>8.3.2      增加一块硬盘的步骤</h4><ol><li><p>虚拟机添加硬盘   </p><p><strong>点击虚拟机  设置   点击硬盘   点击添加</strong>  </p><p><img src="image/1540210401526.png" alt="1540210401526"></p></li><li><p>分区  <strong>fdisk /dev/sdb</strong></p><p><strong>输入m  回车</strong></p><p><img src="image/1540210573299.png" alt="1540210573299"></p></li></ol><p><strong>输入n 回车后  输入w  回车</strong></p><p><img src="image/1540210602918.png" alt="1540210602918"></p><p><img src="image/1540210650737.png" alt="1540210650737"></p><ol start="3"><li>格式化    <strong>mkfs  -t ext4  /dev/sdb1</strong>  </li></ol><p><img src="image/1540210755353.png" alt="1540210755353"></p><p>这样就格式化成功了。</p><p><img src="image/1540210809583.png" alt="1540210809583"></p><ol start="4"><li><p>挂载        比如挂载到/home/newdisk文件</p><ol><li><p><strong>mkdir  /home/newdisk</strong></p></li><li><p><strong>mount   /dev/sdb1   /home/newdisk</strong>    注意：不要在/home/newdisk的文件下执行</p></li></ol><p><img src="image/1540211084429.png" alt="1540211084429"></p></li></ol><h4 id="8-3-2-注意"><a href="#8-3-2-注意" class="headerlink" title="8.3.2  注意"></a>8.3.2  <strong>注意</strong></h4><p>这样挂载的文件硬盘分区，在重启后就会自动的卸载。不能长时间维持。</p><h3 id="8-4-设置自动挂载"><a href="#8-4-设置自动挂载" class="headerlink" title="8.4  设置自动挂载"></a>8.4  设置自动挂载</h3><p>​      上面的方式，只是临时生效，当你重启系统，挂载的关系没有， 配置linux的分区表，实现启动时，自动挂载.</p><p><strong>vim /etc/fstab</strong>     添加下图的命令    再  <strong>mount -a</strong>   <strong>意思是挂载所有</strong></p><p><img src="image/1540211675668.png" alt="1540211675668"></p><p>重启后，会自动挂载.</p><p><strong>如果，我们希望卸载，指令</strong></p><p><strong>umount 设备名 | 挂载路径</strong></p><p><strong>umount /dev/sdb1  或者  umount  /home/newdisk</strong>     <strong>注意不要在/home/newdisk文件下去卸载</strong></p><h3 id="8-5-磁盘情况查询"><a href="#8-5-磁盘情况查询" class="headerlink" title="8.5 磁盘情况查询"></a>8.5 磁盘情况查询</h3><h4 id="8-5-1-查询系统整体磁盘使用情况"><a href="#8-5-1-查询系统整体磁盘使用情况" class="headerlink" title="8.5.1      查询系统整体磁盘使用情况"></a>8.5.1      查询系统整体磁盘使用情况</h4><p>基本语法</p><p>​      df -h</p><p>应用实例</p><p>查询系统整体磁盘使用情况</p><p><img src="image/1540212498830.png" alt="1540212498830"></p><h4 id="8-5-2-查询指定目录的磁盘占用情况"><a href="#8-5-2-查询指定目录的磁盘占用情况" class="headerlink" title="8.5.2      查询指定目录的磁盘占用情况"></a>8.5.2      查询指定目录的磁盘占用情况</h4><p> 基本语法</p><p>  du -h  /目录</p><p>  查询指定目录的磁盘占用情况，默认为当前目录</p><p>   -s 指定目录占用大小汇总</p><p>   -h 带计量单位</p><p>   -a 含文件</p><p>   –max-depth=1  子目录深度</p><p>   -c 列出明细的同时，增加汇总值</p><p> 应用实例</p><p>查询 /usr目录的磁盘占用情况，深度为1</p><p> du  -ach  –max-depth= 1  /home 或者 /opt</p><p><img src="image/1540212787424.png" alt="1540212787424"></p><h3 id="8-6-磁盘情况-工作实用指令"><a href="#8-6-磁盘情况-工作实用指令" class="headerlink" title="8.6 磁盘情况-工作实用指令"></a>8.6 磁盘情况-工作实用指令</h3><p>1) 统计/home文件夹下文件的个数<br><strong>ls  -l  /home | grep “^-“ | wc -l</strong>            “^-“  表示以-开头的    -开头就是文件   </p><p>2) 统计/home文件夹下目录的个数<br> <strong>ls –l /home/ | grep “^d” | wc -l</strong>         “^d”  表示以d开头的    d开头就是文件夹   </p><p>3) 统计/home文件夹下文件的个数，包括子文件夹里的<br> <strong>ls –lR /home/ | grep “^-” | wc -l</strong>    </p><p>4) 统计/home文件夹下目录的个数，包括子文件夹里的<br> <strong>ls –lR /home/ | grep “^d” | wc -l</strong></p><p>以树状显示home目录结构  [没有tree指令, 使用yum 来安装]</p><p>先安装</p><p>yum install tree</p><p><img src="image/1540213190480.png" alt="1540213190480"></p><h2 id="9-linux的网络配置"><a href="#9-linux的网络配置" class="headerlink" title="9  linux的网络配置"></a>9  linux的网络配置</h2><h3 id="9-1-linux网络环境配置"><a href="#9-1-linux网络环境配置" class="headerlink" title="9.1 linux网络环境配置"></a>9.1 linux网络环境配置</h3><p><img src="image/1540292474880.png" alt="1540292474880"></p><h3 id="9-2-自动获取"><a href="#9-2-自动获取" class="headerlink" title="9.2      自动获取"></a>9.2      自动获取</h3><p><img src="image/1540293176902.png" alt="1540293176902"></p><p>说明</p><p>1) 配置比较简单</p><p>2) 每次启动linux后，分配的ip地址可能不一样。不适合做服务器</p><h3 id="9-3-配置固定的ip地址"><a href="#9-3-配置固定的ip地址" class="headerlink" title="9.3     配置固定的ip地址"></a>9.3     配置固定的ip地址</h3><p>vim  /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>如果希望配置生效</p><p>1) reboot </p><p>2) service network restart // 重启网络服务</p><h3 id="9-4-修改VMnet8的ip地址"><a href="#9-4-修改VMnet8的ip地址" class="headerlink" title="9.4 修改VMnet8的ip地址"></a>9.4 修改VMnet8的ip地址</h3><ol><li><p>点击vmware的编辑，然后点击虚拟网络编辑器。点击更改设置。点击VMnet8之后就可以修改ip地址</p><p><img src="image/1540293381454.png" alt="1540293381454"></p></li></ol><h3 id="9-5-查看VMnet8的网关地址"><a href="#9-5-查看VMnet8的网关地址" class="headerlink" title="9.5 查看VMnet8的网关地址"></a>9.5 查看VMnet8的网关地址</h3><p>点击vmware的编辑，然后点击虚拟网络编辑器,点击nat设置</p><p><img src="image/1540818973905.png" alt="1540818973905"></p><h3 id="9-6-linux网络环境配置"><a href="#9-6-linux网络环境配置" class="headerlink" title="9.6 linux网络环境配置"></a>9.6 linux网络环境配置</h3><ol><li><p>每次自动连接网络。</p><p> 点击系统 ，再点击首选项，点击网络连接，点击System eth0 的编辑，勾选上自动连接即可。</p><p><strong>缺点</strong>：每次linux启动会自动的获取ip，但是每次获取的ip地址可能不一样。所以在开发的时候我们有可能不知道ip地址是什么。这样不适合做服务器，因为服务器的ip是固定的。</p></li></ol><p><img src="image/1540294451811.png" alt="1540294451811"></p><ol start="2"><li><p>指定固定的ip</p><p>直接修改配置文件来指定ip，并可以连接到外网（程序员推荐）。</p></li></ol><p>编辑  vi /etc/sysconfig/network-scripts/ifcfg-eth0   将ip配置为192.168.78.130为例</p><p>ifcfg-eth0 是eth0这个网卡的配置文件。</p><p>在文件中的属性的说明：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>DEVICE=eth0</td><td>接口名（设备，网卡名）</td></tr><tr><td>HWADDR=00:OC:2x:6x:0x:xx</td><td>MAC地址</td></tr><tr><td>TYPE=Ethernet</td><td>网络类型（通常是Ethernet）</td></tr><tr><td>UUID=…….</td><td>随机ID</td></tr><tr><td>ONBOOT=yes</td><td>系统启动的时候网络接口是否有效（yes/no）yes表示开启</td></tr><tr><td>BOOTPROTO=static</td><td>ip的配置方法[none\</td><td>static\</td><td>bootp\</td><td>dhcp]   不使用ip  \</td><td>使用静态ip（表示ip不变化）\</td><td>bootp协议  \</td><td>DHCP协议(表示自动获取ip)</td></tr><tr><td>IPADDR=192.168.78.130</td><td>IP地址，可以自己设置为自己想要的</td></tr><tr><td>GATEWAY</td><td>网关</td></tr><tr><td>DNS1</td><td>域名解析器（和网关一样即可）</td></tr></tbody></table><p><img src="image/1540295876007.png" alt="1540295876007"></p><p>在修改后保存， 重启网络  service network restart   就修改成功了</p><p><img src="image/1540296087710.png" alt="1540296087710"></p><h2 id="10-进程管理-重要"><a href="#10-进程管理-重要" class="headerlink" title="10  进程管理(重要)"></a>10  进程管理(重要)</h2><h3 id="10-1-基本介绍"><a href="#10-1-基本介绍" class="headerlink" title="10.1 基本介绍"></a>10.1 基本介绍</h3><p>1) 在LINUX中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个ID号。</p><p>2) 每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器</p><p>3) 每个进<strong>程都可能以两种方式存在的。前台</strong> <strong>与后台</strong>，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行[sshd , crond]。 </p><p>4) 一般系统的<strong>服务都是以后台进程的方式存在</strong>，而且都会常驻在系统中。直到关机才才结束。</p><h4 id="10-1-1-显示系统执行的进程"><a href="#10-1-1-显示系统执行的进程" class="headerlink" title="10.1.1      显示系统执行的进程"></a>10.1.1      显示系统执行的进程</h4><p>ps命令是用来查看目前系统中，有哪些正在执行的进程，以及他们的执行状况。可以不加任何的参数</p><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>ps -a</td><td>显示当前终端的所有进程信息</td></tr><tr><td>ps -u</td><td>以用户的格式显示进程信息</td></tr><tr><td>ps -x</td><td>显示后台进程运行的参数</td></tr></tbody></table><p>我们常用ps -aux 显示所有的进程</p><p><img src="image/1540297596773.png" alt="1540297596773"></p><h4 id="10-1-2-ps详解"><a href="#10-1-2-ps详解" class="headerlink" title="10.1.2      ps详解"></a>10.1.2      ps详解</h4><p>指令：ps –aux | grep xxx ，比如我看看有没有sshd服务</p><p>ps -aux | grep sshd    查看sshd进程</p><p>指令说明</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>USER</td><td>用户名称</td></tr><tr><td>PID</td><td>进程号</td></tr><tr><td>%CPU</td><td>进程占用CPU的百分比</td></tr><tr><td>%MEM</td><td>进程占用物理内存的百分比</td></tr><tr><td>VSZ</td><td>进程占用的虚拟内存大小（单位：KB）</td></tr><tr><td>RSS</td><td>进程占用的物理内存大小（单位：KB）</td></tr><tr><td>TTY</td><td>终端名称,缩写 .</td></tr><tr><td>STAT</td><td>进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</td></tr><tr><td>STARTED</td><td>进程的启动时间</td></tr><tr><td>TIME</td><td>CPU时间，即进程使用CPU的总时间</td></tr><tr><td>COMMAND</td><td>启动进程所用的命令和参数，如果过长会被截断显示</td></tr></tbody></table><p>查看父进程 ps -ef 查看父进程    PPID 父进程ID  </p><p><img src="image/1540298696444.png" alt="1540298696444"></p><p>ps -ef | grep  sshd   查看sshd进程的父进程</p><h3 id="10-2-终止进程kill和killall"><a href="#10-2-终止进程kill和killall" class="headerlink" title="10.2  终止进程kill和killall"></a>10.2  终止进程kill和killall</h3><h4 id="10-2-1-介绍"><a href="#10-2-1-介绍" class="headerlink" title="10.2.1   介绍"></a>10.2.1   介绍</h4><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill命令来完成此项任务。</p><h4 id="10-2-2-基本语法"><a href="#10-2-2-基本语法" class="headerlink" title="10.2.2      基本语法"></a>10.2.2      基本语法</h4><p>kill  [选项] 进程号（功能描述：通过进程号杀死进程 -9 强制终止）</p><p>killall 进程名称   （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p><h4 id="10-2-3-常用选项"><a href="#10-2-3-常用选项" class="headerlink" title="10.2.3      常用选项"></a>10.2.3      常用选项</h4><p>-9 :表示强迫进程立即停止</p><h4 id="10-2-4-实践"><a href="#10-2-4-实践" class="headerlink" title="10.2.4   实践"></a>10.2.4   实践</h4><p>案例1：踢掉某个非法登录用户【mfl】</p><p><img src="image/1540378924187.png" alt="1540378924187"></p><p>kill 3196 就可以杀死上面的mfl登录用户</p><p><img src="image/1540379050427.png" alt="1540379050427"></p><p>案例2: 终止远程登录服务sshd, 在适当时候再次重启sshd服务</p><p>​     我们可以直接取终止远程服务的sshd进程。就不能再有远程登录的用户登录进来</p><p><img src="image/1540379218644.png" alt="1540379218644"></p><p>该mfl用户就不能远程连接上linux了。</p><p><img src="image/1540379252031.png" alt="1540379252031"></p><p>案例3: 终止多个gedit 编辑器【killall 通过进程名称终止进程】</p><p>ps -aux | grep gedit   这里有两个gedit编辑器进程。</p><p><img src="image/1540379665299.png" alt="1540379665299"></p><p>killall  gedit</p><p><img src="image/1540379772260.png" alt="1540379772260"></p><p>案例4：强制杀掉一个终端  对于 bash</p><p>这是一个终端。</p><p><img src="image/1540380070692.png" alt="1540380070692"></p><p>就是这个进程号</p><p><img src="image/1540380102571.png" alt="1540380102571"></p><p>如果直接 kill 3322 是不能杀掉的，因为这是一个重要进程  </p><p><img src="image/1540380168194.png" alt="1540380168194"></p><p>kill -9  对应的bash的进程号，这样就能杀死这个终端进程。</p><p><img src="image/1540380205578.png" alt="1540380205578"> </p><h3 id="10-3-查看进程树-pstree"><a href="#10-3-查看进程树-pstree" class="headerlink" title="10.3 查看进程树 pstree"></a>10.3 查看进程树 pstree</h3><h4 id="10-3-1-基本语法"><a href="#10-3-1-基本语法" class="headerlink" title="10.3.1      基本语法"></a>10.3.1      基本语法</h4><p>pstree [选项] ,可以更加直观的来看进程信息</p><h4 id="10-3-2-常用选项"><a href="#10-3-2-常用选项" class="headerlink" title="10.3.2      常用选项"></a>10.3.2      常用选项</h4><p>-p :显示进程的PID</p><p>-u :显示进程的所属用户</p><p>13.3.3      应用实例：</p><p>1) 案例1：请用树状的形式显示进程的pid </p><p>pstree -p</p><p><img src="image/1540380315173.png" alt="1540380315173"></p><p>案例2：请用树状的形式进程的用户id</p><p>pstree –u</p><p><img src="image/1540380360595.png" alt="1540380360595"></p><p>pstree -pu</p><p><img src="image/1540380390388.png" alt="1540380390388"></p><h3 id="10-4-服务-service-管理"><a href="#10-4-服务-service-管理" class="headerlink" title="10.4 服务(service)管理"></a>10.4 服务(service)管理</h3><p>介绍:</p><p>服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql , sshd  防火墙等)，因此我们又称为守护进程，是Linux中非常重要的知识点。【原理图】</p><p><img src="image/1540380735771.png" alt="1540380735771"></p><p>service管理指令：</p><p>service  服务名 [start | stop | restart | reload | status]</p><p>在CentOS7.0后 不再使用service ,而是 systemctl</p><p>使用案例：</p><p>1) 查看当前防火墙的状况，关闭防火墙和重启防火墙。</p><p>Service iptables status  只有22号端口打开</p><p><img src="image/1540380940763.png" alt="1540380940763"></p><p>关闭或者启用防火墙后，立即生效。[测试  某个端口即可]<br>        service  iptables  stop ,</p><p><img src="image/1540381029737.png" alt="1540381029737"></p><p> service iptables start</p><p><img src="image/1540381065836.png" alt="1540381065836"></p><p>telnet  ip  端口  可以查看该ip地址的端口是否开启   比如 telnet  192.168.78.130  22</p><p>window10 在控制面板  —- 程序中开启</p><p><img src="image/1540381674828.png" alt="1540381674828"></p><p>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。</p><p> 第一种方式 setup 指令，点击空格键就关闭。下次重启就不会自启动这个服务</p><p><img src="image/1540382062721.png" alt="1540382062721"></p><p>这个指令可以看到所有的服务 ls -l /etc/init.d/</p><p><img src="image/1540382273441.png" alt="1540382273441"></p><h4 id="10-4-1-服务的运行级别"><a href="#10-4-1-服务的运行级别" class="headerlink" title="10.4.1 服务的运行级别"></a>10.4.1 服务的运行级别</h4><p>和系统的相似。运行级别说明：  </p><p>1) 0 ：关机 </p><p>2) 1 ：单用户 [类似安全模式， 这个模式可以帮助找回root密码]</p><p>3) 2：多用户状态没有网络服务</p><p>4) 3：多用户状态有网络服务 [<strong>使用最多</strong>]</p><p>5) 4：系统未使用保留给用户</p><p>6) 5：图形界面 【】</p><p>7) 6：系统重启  </p><p><img src="image/1540382601135.png" alt="1540382601135"></p><p>所以我们可以在系统的不同运行级别去设置服务在该运行级别是否自启动。如果希望设置某个服务自启动或关闭永久生效，要使用chkconfig指令。</p><p>chkconfig</p><p>​    可以给每个服务的各个运行级别设置是否自启动。</p><p>​    使用chkconfig修改的服务启动级别，在重启linux后才会生效</p><p>chkconfig –list</p><p><img src="image/1540383151665.png" alt="1540383151665"></p><p>chkconfig –list | grep network  </p><p><img src="image/1540383185789.png" alt="1540383185789"></p><p>chkconfig sshd –list</p><p><img src="image/1540383297885.png" alt="1540383297885"></p><p>我们设置在运行级别为5是关闭sshd服务</p><p>chkconfig  –level 5 sshd off   在重启linux后在5的运行级别就关闭了sshd服务，就不能远程连接该linux</p><p><img src="image/1540383432065.png" alt="1540383432065"></p><p>在所有运行级别下关闭或开启自启动服务  不需要写  –level   比如在所有的运行级别关闭sshd:</p><p>chkconifg  sshd off</p><h3 id="10-5-动态监控进程"><a href="#10-5-动态监控进程" class="headerlink" title="10.5 动态监控进程"></a>10.5 动态监控进程</h3><h4 id="10-5-1-介绍"><a href="#10-5-1-介绍" class="headerlink" title="10.5.1  介绍"></a>10.5.1  介绍</h4><p>top与ps命令很相似。它们都用来显示正在执行的进程。Top与ps最大的不同之处，在于top在执行一段时间可以更新正在运行的的进程(默认每3秒变化一次)。<br> 基本语法：top [选项]</p><h4 id="10-5-3-选项说明"><a href="#10-5-3-选项说明" class="headerlink" title="10.5.3   选项说明"></a>10.5.3   选项说明</h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-d  秒数</td><td>指定top指令多少秒更新，默认为3秒</td></tr><tr><td>-i</td><td>使top不显示任何闲置和僵死的进程</td></tr><tr><td>-p</td><td>通过指定进程ID来只监控某一个进程</td></tr></tbody></table><p> top 指令的说明</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>P</td><td>以cpu的使用率排序，默认就为该指令</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以pid排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><p> <img src="image/1540821566422.png" alt="1540821566422"></p><h3 id="10-6-监控网络状态"><a href="#10-6-监控网络状态" class="headerlink" title="10.6 监控网络状态"></a>10.6 监控网络状态</h3><p> 查看系统网络情况netstat  </p><p>基本语法</p><p>​      netstat [选项]</p><p>选项说明 </p><p>-an  按一定顺序排列输出</p><p>-p  显示哪个进程在调用</p><p><img src="image/1540822350549.png" alt="1540822350549"></p><p>应用案例 </p><p>请查看服务名为 sshd 的服务的信息。</p><p> Netstat –anp | grep sshd</p><p><img src="image/1540822727738.png" alt="1540822727738"></p><p>如果我们希望查看当前系统有哪些端口在监听</p><p>netstat  -tlnp </p><p><img src="image/1540822912883.png" alt="1540822912883"></p><p>问题：Linux常用命令，至少6个(netstat , top , lsblk , find , ps , chkconfig )</p><p>问题：Linux查看内存、磁盘存储、io 读写（iotop）、端口占用、进程等命令</p><p>top </p><p>df –lh</p><p>Netstat –tunlp </p><p>Ps –aux | grep 进程名</p><p>Iotop ， 如果没有，就先安装</p><h2 id="11-rpm-和-yum软件安装"><a href="#11-rpm-和-yum软件安装" class="headerlink" title="11  rpm 和 yum软件安装"></a>11  rpm 和 yum软件安装</h2><h3 id="11-1-rpm包的管理"><a href="#11-1-rpm包的管理" class="headerlink" title="11.1 rpm包的管理"></a>11.1 rpm包的管理</h3><p>​       一种用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式名称虽然打上了RedHat的标志，但理念是通用的。</p><p>Linux的分发版本都有采用（suse,redhat, centos 等等），可以算是公认的行业标准了。</p><p>简单查询语句 rpm -qa | grep xxx</p><p><img src="image/1541076237589.png" alt="1541076237589"></p><p><img src="image/1541076439734.png" alt="1541076439734"></p><h3 id="11-2-rpm-常用的指令"><a href="#11-2-rpm-常用的指令" class="headerlink" title="11.2 rpm 常用的指令"></a>11.2 rpm 常用的指令</h3><p>rpm -qa  列出所有的rpm软件</p><p>rpm -qa | grep xxx 列出某个rmp软件</p><p>rpm -qi  file  查软件包的具体信息</p><p><img src="image/1541077942744.png" alt="1541077942744"></p><p> rpm -ql firefox  查看firefox软件的安装在哪里去了</p><p><img src="image/1541078008215.png" alt="1541078008215"></p><p>rpm -qf 文件的全路径   查该文件路径是属于那个软件的</p><p><img src="image/1541078179359.png" alt="1541078179359"></p><h3 id="13-3-卸载rpm包"><a href="#13-3-卸载rpm包" class="headerlink" title="13.3 卸载rpm包"></a>13.3 卸载rpm包</h3><p>基本语法</p><p>rpm -e RPM包的名称</p><p>应用案例</p><p>删除firefox  软件包</p><p>rpm -e firefox </p><p><img src="image/1541078378766.png" alt="1541078378766"></p><p>细节讨论</p><p>1) 如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。</p><p>如：  $ rpm -e  foo </p><p><strong>removing these packages would break dependencies:foo is needed by bar-1.0-1</strong></p><p> 2) 如果我们就是要删除 foo这个rpm 包，可以增加参数 –nodeps ,就可以强制删除，但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行</p><p>如：$ rpm -e <strong>–nodeps</strong> foo     [小心使用]</p><h3 id="11-4-安装rpm包"><a href="#11-4-安装rpm包" class="headerlink" title="11.4 安装rpm包"></a>11.4 安装rpm包</h3><p> 基本语法</p><p>rpm  -ivh  RPM包全路径名称 </p><p> 参数说明</p><p>   i=install 安装</p><p>   v=verbose 提示</p><p>   h=hash  进度条</p><p>应用实例</p><p>安装firefox浏览器</p><p>提示：很多的rpm包，就在我们的centos安装的镜像文件中</p><p>先找到firefox的安装包：挂载上我们安装的iso文件，在/media/文件中就可以找到。</p><p><img src="image/1541078707708.png" alt="1541078707708"></p><p>就会出现VMware tools</p><p><img src="image/1541078856122.png" alt="1541078856122"></p><p>再安装。</p><p><img src="image/1541080183071.png" alt="1541080183071"></p><h3 id="11-5-yum的使用"><a href="#11-5-yum的使用" class="headerlink" title="11.5 yum的使用"></a>11.5 yum的使用</h3><p>​       yum，是Yellow dog Updater, Modified 的简称，是杜克大学为了提高RPM 软件包安装性而开发的一种软件包管理器。起初是由yellow dog 这一发行版的开发者Terra Soft 研发，用python 写成，那时还叫做yup(yellow dog updater)，后经杜克大学的Linux@Duke 开发团队进行改进，遂有此名。yum 的宗旨是自动化地升级，安装/移除rpm 包，收集rpm 包的相关信息，检查依赖性并自动提示用户解决。yum 的关键之处是要有可靠的repository，顾名思义，这是软件的仓库，它可以是http 或ftp 站点，也可以是本地软件池，但必须包含rpm 的header，header 包括了rpm 包的各种信息，包括描述，功能，提供的文件，依赖性等。正是收集了这些header 并加以分析，才能自动化地完成余下的任务。 　　</p><p>​        yum 的理念是使用一个中心仓库(repository)管理一部分甚至一个distribution 的应用程序相互关系，根据计算出来的软件依赖关系进行相关的升级、安装、删除等等操作，减少了Linux 用户一直头痛的dependencies 的问题。这一点上，yum 和apt 相同。apt 原为debian 的deb 类型软件管理所使用，但是现在也能用到RedHat 门下的rpm 了。 　　</p><p>​        yum 主要功能是更方便的添加/删除/更新RPM 包，自动解决包的倚赖性问题，便于管理大量系统的更新问题。 </p><p>​      yum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除rpm 包时遇到的依赖性问题，保持与RPM 数据库的一致性。 </p><p>​      yum是shell前端软件包管理器。基于rpm管理。能够从指定服务器自动下载rpm包并且安装。可以自动处理依赖性关系。并且一次安装所有的依赖包软件。使用yum的前提是可以联网。</p><p>查询yum 服务器是否有需要安装的软件</p><p>   yum list | grep xx 软件列表</p><p><img src="image/1542541899863.png" alt="1542541899863"></p><p>安装指定的yum包</p><p>​      yum install xxx 下载安装</p><p><img src="image/1542541981965.png" alt="1542541981965"></p><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-y</td><td>对所有提问都回答“yes”</td></tr></tbody></table><p>参数说明</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>install</td><td>安装rpm软件包</td></tr><tr><td>update</td><td>更新rpm软件包</td></tr><tr><td>check-update</td><td>检查是否有可用的更新rpm软件包</td></tr><tr><td>remove</td><td>删除指定的rpm软件包</td></tr><tr><td>list</td><td>显示软件包信息</td></tr><tr><td>clean</td><td>清理yum过期的缓存</td></tr><tr><td>deplist</td><td>显示yum软件包的所有依赖关系</td></tr></tbody></table><h4 id="11-5-1-修改网络YUM源"><a href="#11-5-1-修改网络YUM源" class="headerlink" title="11.5.1 修改网络YUM源"></a>11.5.1 修改网络YUM源</h4><p>默认的系统YUM源，需要连接国外apache网站，网速比较慢，可以修改关联的网络YUM源为国内镜像的网站，比如网易163。</p><p>1．前期文件准备</p><p>（1）前提条件linux系统必须可以联网</p><p>（2）在Linux环境中访问该网络地址：<a href="http://mirrors.163.com/.help/centos.html" target="_blank" rel="noopener">http://mirrors.163.com/.help/centos.html</a>，在使用说明中点击CentOS6-&gt;再点击保存</p><p>​           <img src="image/1542542640295.png" alt="1542542640295">                                       </p><p>图1-164 下载CentOS6</p><p>（3）查看文件保存的位置</p><p><img src="image/1542542667581.png" alt="1542542667581"></p><p>在打开的终端中输入如下命令，就可以找到文件的保存位置。</p><p>[atguigu@hadoop101 下载]$ pwd</p><p>/home/atguigu/下载</p><p>2．替换本地yum文件</p><p>​    （1）把下载的文件移动到/etc/yum.repos.d/目录</p><p>[root@hadoop101 下载]# mv CentOS6-Base-163.repo /etc/yum.repos.d/  </p><p>​    （2）进入到/etc/yum.repos.d/目录</p><p>[root@hadoop101 yum.repos.d]# pwd</p><p>/etc/yum.repos.d</p><p>​    （3）用CentOS6-Base-163.repo替换CentOS-Base.repo</p><p>[root@hadoop101 yum.repos.d]# mv CentOS6-Base-163.repo  CentOS-Base.repo</p><p>3．安装命令</p><p>（1）[root@hadoop101 yum.repos.d]#yum clean all</p><p>（2）[root@hadoop101 yum.repos.d]#yum makecache</p><p>yum makecache就是把服务器的包信息下载到本地电脑缓存起来</p><p>4．测试</p><p>[root@hadoop101 yum.repos.d]#yum list | grep firefox</p><p>[root@hadoop101 ~]#yum -y install firefox.x86_64</p><h2 id="12-javaEE环境安装"><a href="#12-javaEE环境安装" class="headerlink" title="12 javaEE环境安装"></a>12 javaEE环境安装</h2><p>如果需要在Linux下进行JavaEE的开发，我们需要安装如下软件：</p><h3 id="12-1-安装JDK"><a href="#12-1-安装JDK" class="headerlink" title="12.1 安装JDK"></a>12.1 安装JDK</h3><p>安装步骤<br>1) 先将软件通过xftp5 上传到/opt 下<br>2) 解压缩到/opt<br>3) 配置环境变量的配置文件vim /etc/profile<br>4) JAVA_HOME=/opt/jdk1.8.0_191<br>5) PATH=/opt/jdk1.8.0_191/bin:$PATH<br>6) export JAVA_HOME PATH</p><p>7）需要注销当前用户才能正常使用。</p><p>测试是否安装成功<br>编写一个简单的Hello.java 输出”hello,world!”</p><h3 id="12-2-tomcat的安装"><a href="#12-2-tomcat的安装" class="headerlink" title="12.2 tomcat的安装"></a>12.2 tomcat的安装</h3><p>步骤:<br>1) 解压缩到/opt<br>2) 启动tomcat ./startup.sh<br>3) 开放端口vim /etc/sysconfig/iptables</p><p><img src="image/1543233017134.png" alt="1543233017134"></p><p>4) 重启防火墙 service  iptables restart</p><p><img src="image/1543233135934.png" alt="1543233135934"></p><p>测试是否安装成功：<br>在windows、Linux 下访问<a href="http://192.168.30.130:8080" target="_blank" rel="noopener">http://192.168.30.130:8080</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot入门</title>
      <link href="/2019/04/11/spring-2019-04-11-spring-boot-primer/"/>
      <url>/2019/04/11/spring-2019-04-11-spring-boot-primer/</url>
      
        <content type="html"><![CDATA[<h2 id="一、入门搭建项目"><a href="#一、入门搭建项目" class="headerlink" title="一、入门搭建项目"></a><strong>一、入门搭建项目</strong></h2><h3 id="1、搭建项目"><a href="#1、搭建项目" class="headerlink" title="1、搭建项目"></a>1、搭建项目</h3><ol><li>使用maven创建maven项目</li></ol><ol start="2"><li>在pom.xml文件中加入spring-boot的parent</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.15.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>src/main/java下创建Example.java</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Example<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>直接运行main 方法 就会直接启动一个web项目。</li></ol><ol start="5"><li>@EnableAutoConfiguration注解是让spring-boot猜测你想怎么配置,实际上，他是通过你在classpath中的配置</li><li>注意，自动配置 可以配合 Starter POMs 一起工作，但二者不是捆绑到一起的。你仍然可以将Starter POMs中的依赖单独拣出使用，Spring Boot还是会自动配置。</li></ol><h3 id="2、jar包问题"><a href="#2、jar包问题" class="headerlink" title="2、jar包问题"></a>2、jar包问题</h3><p>1.生成了一个springboot项目架构，但是以运行main方法的形式启动程序时候，总是自动关闭服务，tomcat也没有起起来报如下错误：</p><p>44:27.566  INFO 9440 — [Thread-1] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@43195e57: startup date [Thu Dec 29 13:44:26 CST 2016]; root of context hierarchy<br>2016-12-29 13:44:27.567  INFO 9440 — [ Thread-1] o.s.j.e.a.AnnotationMBeanExporter   : Unregistering JMX-exposed beans on shutdown</p><p>2.定位应该是依赖包的问题，程序和配置本身没有错，于是就删除了~/.m2目录下的所有缓存包，然后重新执行。</p><h3 id="3、打包项目"><a href="#3、打包项目" class="headerlink" title="3、打包项目"></a>3、打包项目</h3><ol><li><p>spring-boot项目需要打包项目的时候只需要打包成jar包就可以直接运行。在pom.xml中加上</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li><li><p>Spring Boot的Maven插件（Spring Boot Maven plugin）能够以Maven的方式为应用提供Spring Boot的支持，即为Spring Boot应用提供了执行Maven操作的可能。Spring Boot Maven plugin能够将Spring Boot应用打包为可执行的jar或war文件，然后以通常的方式运行Spring Boot应用。Spring Boot Maven plugin的最新版本为2017.6.8发布的1.5.4.RELEASE，要求Java 8, Maven 3.2及以后。</p></li><li><p>之后使用maven命令mvn package打包项目为jar包，使用java -jar jar包名就可以直接启动springboot项目。</p><h4 id="1、不使用parentPOM下使用spring-boot"><a href="#1、不使用parentPOM下使用spring-boot" class="headerlink" title="1、不使用parentPOM下使用spring-boot"></a>1、不使用parentPOM下使用spring-boot</h4><ol><li><p>不是每个人都喜欢继承 spring-boot-starter-parent POM，比如你可能需要使用公司的标准parent，或只是倾向于显式声明所有的Maven配置。如果你不想使用 spring-boot-starter-parent ，可以使用dependencyManagement中通过设置 scope=import 的依赖，你仍能获取到依赖管理的好处：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Import dependency management from Spring Boot --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.15.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre></li><li><p>这样的使用是不允许使用其他配置来覆盖个别的依赖，但是我们可以在dependencyManagement节点中插入一个节点。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Override Spring Data release train provided by Spring Boot --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-releasetrain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Fowler-SR2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Import dependency management from Spring Boot --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.15.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>注 示例中，我们指定了一个BOM，但任何的依赖类型都可以通过这种方式覆盖。</li></ol></li></ol></li></ol><h3 id="4、spring-boot-开发者工具"><a href="#4、spring-boot-开发者工具" class="headerlink" title="4、spring-boot 开发者工具"></a>4、spring-boot 开发者工具</h3><ol><li>热加载</li></ol><p>​         在开发的时候我们常用的热加载，在springboot中我们导入下面的依赖。</p><pre class=" language-xml"><code class="language-xml">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>同时在application.properties中添加上</p><p>spring.thymeleaf.cache=true  对加载引擎的缓存      </p><p>spring.devtools.restart.enabled=true   </p><p>spring.devtools.restart.additional-paths=src/main/java </p><p>就可以开启热加载了。同时在依赖中optional必须为true.</p></li></ol><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><h3 id="1、springboot配置文件"><a href="#1、springboot配置文件" class="headerlink" title="1、springboot配置文件"></a>1、springboot配置文件</h3><p>在springboot中配置文件只有两种：</p><p>application.properties</p><p>application.yaml</p><h3 id="2、yaml语法"><a href="#2、yaml语法" class="headerlink" title="2、yaml语法"></a>2、yaml语法</h3><h4 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h4><p>key:(空格) + value  表示的一对键值对；</p><p>同时以空格来表示上下级关系，只要是左对齐的数据都是同一层级的。注意： 不能使用tab，只能使用空格</p><p>同时key和value都是大小写敏感的。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082 </span></code></pre><h4 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h4><h5 id="1、普通值-布尔值-字符串-数字"><a href="#1、普通值-布尔值-字符串-数字" class="headerlink" title="1、普通值(布尔值,字符串,数字)"></a>1、普通值(布尔值,字符串,数字)</h5><ol><li>直接使用key: value就可以表示</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">last-name</span><span class="token punctuation">:</span> <span class="token string">'小明'</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">28</span><span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><ol start="2"><li><p>字符串默认不加单引号和双引号</p></li><li><p>“”：双引号； 会转义字符串里面的特殊字符，特殊字符会表达他自己的意思，比如：</p><p>name: “zhang \n san”  会变成： zhang 换行  san</p></li><li><p>‘’：单引号； 不会转义字符串里面的特殊字符，比如：</p><p>name: ‘zhang \n san’ 就会输出 zhang \n san</p></li></ol><h5 id="2、对象、map-键值对，属性和值"><a href="#2、对象、map-键值对，属性和值" class="headerlink" title="2、对象、map(键值对，属性和值)"></a>2、对象、map(键值对，属性和值)</h5><p>直接表示层级关系即可,如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">last-name</span><span class="token punctuation">:</span> <span class="token string">'小明'</span>   <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">28</span>   <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">last-name</span><span class="token punctuation">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">}</span></code></pre><h5 id="3、数组、集合（-、list、set）"><a href="#3、数组、集合（-、list、set）" class="headerlink" title="3、数组、集合（[]、list、set）"></a>3、数组、集合（[]、list、set）</h5><p>直接使用的是 - 来表示，比如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lists</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token number">11111</span>   <span class="token punctuation">-</span> <span class="token number">22222</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lists</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">11111</span><span class="token punctuation">,</span> <span class="token number">222222</span><span class="token punctuation">]</span></code></pre><h4 id="3、配置文件值的注入"><a href="#3、配置文件值的注入" class="headerlink" title="3、配置文件值的注入"></a>3、配置文件值的注入</h4><p>在application.yaml中写入：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>   <span class="token key atrule">last-name</span><span class="token punctuation">:</span> 张三   <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">28</span>   <span class="token key atrule">birth</span><span class="token punctuation">:</span> 1995/10/20 08<span class="token punctuation">:</span><span class="token datetime number">30:59</span>   <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>lisi<span class="token punctuation">,</span> wangwu<span class="token punctuation">]</span>   <span class="token key atrule">map</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>k1=v1<span class="token punctuation">,</span> k2=v2<span class="token punctuation">}</span>   <span class="token key atrule">dog</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗<span class="token punctuation">,</span> <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><p>javaBean中：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件配置的每一个值，映射到这个javaBean中 * @ConfigurationProperties就是将配置文件中的属性和javaBean中的属性绑定； * prefix="person" 告诉配置yaml文件中那个的所有属性进行一一映射 * 同时这个javaBean是交给了spring容器的管理的，才能使用@ConfigurationProperties提供的功能 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> friends<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><p>导入配置文件处理器的依赖，就在使用配置文件时提供提示了。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置文件处理器的依赖 在javaBean中有@ConfigurationProperties的就会有提示 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="4、properties文件的注入"><a href="#4、properties文件的注入" class="headerlink" title="4、properties文件的注入"></a>4、properties文件的注入</h4><p>在properties文件中写入:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">张三</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">22</span><span class="token attr-name">person.birth</span> <span class="token punctuation">=</span> <span class="token attr-value">1995/10/02 08:30:59</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">person.friends</span> <span class="token punctuation">=</span> <span class="token attr-value">李四,wangwu</span><span class="token attr-name">person.map.k1</span> <span class="token punctuation">=</span> <span class="token attr-value">v1</span><span class="token attr-name">person.map.k2</span> <span class="token punctuation">=</span> <span class="token attr-value">李四,wangwu</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">小狗</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">2</span></code></pre><p>注意：当在sts中properties不能输入中文时，每次输入中文都会变成unicode编码。可以对编辑器显示方式进行设置，让其识别unicode或者<a href="https://www.baidu.com/s?wd=utf-8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">utf-8</a>编码。</p><p>点击sts的file —&gt; properties. 下面的Text file Encoding这个之前是ISO-8859-1 设置成utf-8就可以输入中文。</p><p>但是这样保存的中文最后保存的时候也是保存成iso8859-1，所以如下方法：</p><p>1.下载离线安装文件：<a href="http://sourceforge.jp/projects/propedit/downloads/40156/jp.gr.java_conf.ussiy.app.propedit_5.3.3.zip/" target="_blank" rel="noopener">http://sourceforge.jp/projects/propedit/downloads/40156/jp.gr.java_conf.ussiy.app.propedit_5.3.3.zip/</a><br>2.安装与检验<br>将得到的文件直接解压，可得到这样一个文件夹 jp.gr.java_conf.ussiy.app.propedit_5.3.3 ，直接将该文件夹复制到 Eclipse目录下覆盖插件文件夹下。</p><p>3.重启Eclipse。<br>4.选中 <em>.properties 文件，右键 - Open With ，你会看到多了一个 PropertiesEditor 子菜单。<br>5.将PropertiesEditor设为默认的打开方式<br>工具栏-&gt;Window-&gt;Preferences-&gt;General-&gt;Editors-&gt;File Associations,添加一个</em>.properties。<br>下方的 Associated editors 栏里有 PropertiesEditor 项，选中，点击 Default 按钮。<br>双击properties文件默认就会用PropEditor打开了。</p><h3 id="3、-ConfigurationProperties和-Value的获取配置文件值的比较"><a href="#3、-ConfigurationProperties和-Value的获取配置文件值的比较" class="headerlink" title="3、@ConfigurationProperties和@Value的获取配置文件值的比较"></a>3、@ConfigurationProperties和@Value的获取配置文件值的比较</h3><table><thead><tr><th style="text-align:center">对比</th><th style="text-align:center">@Value</th><th style="text-align:center">@ConfigurationProperties</th></tr></thead><tbody><tr><td style="text-align:center">功能</td><td style="text-align:center">一个个的指定属性</td><td style="text-align:center">批量的注入配置文件的属性</td></tr><tr><td style="text-align:center">对松散绑定的支持（松散语法）</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">spEL</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">JSR303的数据验证</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">复杂类型封装</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr></tbody></table><p>对spEL的支持。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"${person.last-name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{11*2}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span></code></pre><p>无论是yaml和properties他们都能去配置文件获取值，</p><p>如果说，我们只需要获取一个属性的值，我们使用@value就可以了</p><p>如果我们要获得对象的值，我们就使用@ConfigurationProperties.</p><h3 id="4、-PropertySource-和-ImportResource"><a href="#4、-PropertySource-和-ImportResource" class="headerlink" title="4、@PropertySource 和@ImportResource"></a>4、@PropertySource 和@ImportResource</h3><p>@<strong>PropertySource</strong>：加载指定的配置文件,只能用于properties文件，用法如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// @Validated</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"classpath:person.properties"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @Value(value = "${person.last-name}")</span>    <span class="token comment" spellcheck="true">// @Email</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Value("#{11*2}")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> friends<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Value(value="${person.map}")</span>    <span class="token comment" spellcheck="true">// 不能对复杂类型赋值</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><p> @<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>       SpringApplication app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>Example<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       app<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span>Banner<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>CONSOLE<span class="token punctuation">)</span><span class="token punctuation">;</span>       app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导入Spring的配置文件让其生效</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.springboot.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>springboot推荐的方法：不编写Spring的配置文件.使用给容器添加组件的方式，使用全注解方式。</p><ol><li>使用@configuration注解—&gt;spring配置类</li><li>使用@bean注解——&gt;给容器添加组件</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件 * 在配置文件中用&lt;bean>&lt;/bean>标签添加组件 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置类@Bean给容器中添加组件了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、配置文件占位符"><a href="#5、配置文件占位符" class="headerlink" title="5、配置文件占位符"></a>5、配置文件占位符</h3><h4 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h4><pre class=" language-properties"><code class="language-properties">${random.value}、${random.int}、${random.long}<span class="token attr-name">${random.int(10)}、${random.int[1024,65536]}</span> <span class="token attr-value">${random.uuid}</span></code></pre><h4 id="2、占位符"><a href="#2、占位符" class="headerlink" title="2、占位符"></a>2、占位符</h4><p>占位符获取之前配置的值，如果没有可以是用:指定默认值</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">${random.uuid}</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">${random.int}</span><span class="token attr-name">person.birth</span> <span class="token punctuation">=</span> <span class="token attr-value">1995/10/02 08:30:59</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">person.friends</span> <span class="token punctuation">=</span> <span class="token attr-value">a, wangwu</span><span class="token attr-name">person.map.k1</span> <span class="token punctuation">=</span> <span class="token attr-value">v1</span><span class="token attr-name">person.map.k2</span> <span class="token punctuation">=</span> <span class="token attr-value">李四,wangwu</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">${person.last-name}_dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">${person.hello:11你</span></code></pre><h3 id="6、profile"><a href="#6、profile" class="headerlink" title="6、profile"></a>6、profile</h3><p>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活、指定参数等方式快速切换环境<br>1、多profile文件形式：<br>–格式：application-{profile}.properties/yml：<br>application-dev.properties、application-prod.properties<br>2、多profile文档块模式：<br>3、激活方式：<br>–命令行–spring.profiles.active=dev<br>–配置文件spring.profiles.active=dev<br>–jvm参数–Dspring.profiles.active=dev</p><h4 id="1、多profiles文件时"><a href="#1、多profiles文件时" class="headerlink" title="1、多profiles文件时"></a>1、多profiles文件时</h4><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>application-dev.properties、application-prod.properties ，默认使用application.properties的配置；</p><p>当存在yaml和properties时按照application.properties来使用</p><h4 id="2、多profile文档块模式"><a href="#2、多profile文档块模式" class="headerlink" title="2、多profile文档块模式"></a>2、多profile文档块模式</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> prod <span class="token comment" spellcheck="true"># 在这可以随意的切换不同的环境模式    </span><span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084  </span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod  </code></pre><h4 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h4><p>​    1、在配置文件中指定  </p><p>​         spring.profiles.active=dev</p><p>​    2、命令行</p><p>​    java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​    可以直接在测试的时候，配置传入命令行参数</p><p>​        sts的命令行 ：param arugment在debug/runAs的arugment参数中，</p><p>​        在其中输入–spring.profiles.active=dev； 就是以命令行的形式启动。</p><p>​    3、虚拟机参数</p><p>​        sts的虚拟机参数 ：VMarugment在debug/runAs 的arugment参数中</p><p>​        在其中输入-Dspring.profiles.active=dev；就是以虚拟机参数的形式启动。</p><h3 id="7、配置文件优先级及加载位置"><a href="#7、配置文件优先级及加载位置" class="headerlink" title="7、配置文件优先级及加载位置"></a>7、配置文件优先级及加载位置</h3><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/  : 项目根目录下的config文件夹</p><p>–file:./   ：项目根目录下</p><p>–classpath:/config/  ：src/main/resource的config文件夹下</p><p>–classpath:/   ：src/main/resource下</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h3 id="8、外部配置加载顺序"><a href="#8、外部配置加载顺序" class="headerlink" title="8、外部配置加载顺序"></a>8、外部配置加载顺序</h3><p><strong>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p><strong>由jar包外向jar包内进行寻找；</strong></p><p><strong>优先加载带profile</strong></p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>再来加载不带profile</strong></p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h3 id="9、SpringBoot的自动配置原理"><a href="#9、SpringBoot的自动配置原理" class="headerlink" title="9、SpringBoot的自动配置原理"></a>9、SpringBoot的自动配置原理</h3><p>1、首先在主配置类中有一个注解@StringBootApplication，它继承了@EnableAutoConfiguration注解，这个注解就会开启spring-boot的自动配置功能，如图：</p><p><img src="image/EnableAutoConiguration.png" alt="EnableAutoConiguration"></p><p>2、@EnableAutConfiguration的作用</p><ul><li>在该注解中有一个@Import(AutoConfigurationImportSelector.class)的注解，这个注解的意思是引入AutoConfigurationImportSelector在这个类，这个类的作用是给容器导入组件，如图：</li></ul><p><img src="image/AutoConfigurationImportSelectorr.png" alt="AutoConfigurationImportSelectorr"></p><ul><li>我们可以查看在AutoConfigurationImportSelector类中的内容，在这个类中的selectImports方法中有一个操作就是：List<string> configurations = getCandidateConfigurations(annotationMetadata,attributes);这是在获取候选的配置信息。</string></li></ul><p><img src="image/selectImports.png" alt="selectImports"></p><p>方法中有一个方法SpringFactoriesLoader.loadFactoryNames，扫描所有jar包类路径下  META-INF/spring.factories，把扫描到的这些文件的内容包装成properties对象，从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；</strong></p><p><img src="image/spring-factorys.png" alt="spring-factorys"></p><p>这些都是在spring-factories文件中的配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Auto Configure</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></code></pre><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token comment" spellcheck="true">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HttpEncodingProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中，就相当于之前写的person类</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token comment" spellcheck="true">//Spring底层@Conditional注解，根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span><span class="token comment" spellcheck="true">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> HttpEncodingProperties properties<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>      <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpEncodingProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>   <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断容器没有这个组件</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；这个类就类似于我们的person类</p><p><img src="image/HttpEncodingProperties.png" alt="HttpEncodingProperties"></p><p><strong>精髓：</strong></p><p>​    1、SpringBoot启动会加载大量的自动配置类</p><p>​    2、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</p><p>​    3、我们再来看这个自动配置类中到底配置了哪些组件（只要我们要用的组件有，我们就不需要再来配置了）</p><p>​    4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</p><p>xxxxAutoConfigurartion：自动配置类；给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="10、细节"><a href="#10、细节" class="headerlink" title="10、细节"></a>10、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p><strong>我们可以通过启用  debug=true属性；来让控制台打印自动配置报告</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p><pre class=" language-java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>AUTO<span class="token operator">-</span>CONFIGURATION REPORT<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Positive matches<span class="token operator">:</span>（自动配置类启用的）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   DispatcherServletAutoConfiguration matched<span class="token operator">:</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> found required <span class="token keyword">class</span> <span class="token string">'org.springframework.web.servlet.DispatcherServlet'</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@ConditionalOnMissingClass</span> did not find unwanted <span class="token keyword">class</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> found <span class="token function">StandardServletEnvironment</span> <span class="token punctuation">(</span>OnWebApplicationCondition<span class="token punctuation">)</span>Negative matches<span class="token operator">:</span>（没有启动，没有匹配成功的自动配置类）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   ActiveMQAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'javax.jms.ConnectionFactory'</span><span class="token punctuation">,</span> <span class="token string">'org.apache.activemq.ActiveMQConnectionFactory'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>   AopAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'org.aspectj.lang.annotation.Aspect'</span><span class="token punctuation">,</span> <span class="token string">'org.aspectj.lang.reflect.Advice'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span></code></pre><h2 id="三、日志使用"><a href="#三、日志使用" class="headerlink" title="三、日志使用"></a>三、日志使用</h2><h3 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h3><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；</p><p>但是SpringBoot选用 SLF4j和logback</p><h3 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h3><h4 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h4><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>图示：</p><p><img src="image/concrete-bindings.png" alt="image/concrete-bindings.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h4 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h4><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="image/legacy.png" alt="legacy"></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p><strong>1、将系统中其他日志框架先排除出去；</strong></p><p><strong>2、用中间包来替换原有的日志框架；</strong></p><p><strong>3、我们导入slf4j其他的实现</strong></p><h3 id="4、springboot的日志关系"><a href="#4、springboot的日志关系" class="headerlink" title="4、springboot的日志关系"></a>4、springboot的日志关系</h3><p><img src="image/logging.png" alt="logging"></p><p>​       在spring-boot-starter-web中依赖了spring-boot-starter包  在下面有spring-boot-starter-logging，在下面就有很多替换的包，SpringBoot底层也是使用slf4j+logback的方式进行日志记录，SpringBoot也把其他的日志都替换成了slf4j。比如log4j-to-slf4j和jul-to-slf4j,  </p><p>​     下面是转化的底层实现</p><p><img src="image/impl.png" alt="impl"></p><p><img src="image/log4j-to-slf4j.png" alt="log4j-to-slf4j"></p><p>   如果我们要引入其他框架一定要把这个框架的默认日志依赖移除掉</p><p>   Spring框架用的是commons-logging；</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可，比如在上面就移除了commons-logging</strong></p><h3 id="5、日志使用"><a href="#5、日志使用" class="headerlink" title="5、日志使用"></a>5、日志使用</h3><h4 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h4><p>SpringBoot默认帮我们配置好了日志；</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//记录器</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println();</span>        <span class="token comment" spellcheck="true">//日志的级别；</span>        <span class="token comment" spellcheck="true">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span>        <span class="token comment" spellcheck="true">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"这是trace日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"这是debug日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是info日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"这是warn日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"这是error日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.com.atguigu</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token comment" spellcheck="true">#logging.path=</span><span class="token comment" spellcheck="true"># 不指定路径在当前项目下生成springboot.log日志</span><span class="token comment" spellcheck="true"># 可以指定完整的路径；</span><span class="token comment" spellcheck="true">#logging.file=G:/springboot.log</span><span class="token comment" spellcheck="true"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><span class="token attr-name">logging.path</span><span class="token punctuation">=</span><span class="token attr-value">/spring/log</span><span class="token comment" spellcheck="true">#  在控制台输出的日志的格式</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n</span><span class="token comment" spellcheck="true"># 指定文件中日志输出的格式</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n</span></code></pre><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h4 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h4><p>给类路径下即source下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><p>最好是使用<strong>logback-spring.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "staging" profile is active --></span>      可以指定某段配置只在某个环境下生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre><p>如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        日志输出格式：            %d表示日期时间，            %thread表示线程名，            %-5level：级别从左显示5个字符宽度            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。             %msg：日志消息，            %n是换行符        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 在dev模式下使用的格式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h3 id="6、切换日志框架"><a href="#6、切换日志框架" class="headerlink" title="6、切换日志框架"></a>6、切换日志框架</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；排除掉logback的依赖和log4j转换为slf4j的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>切换为log4j2，排除掉spring-boot-starter-logging  这是使用的slf4j和logback,添加上spring-boot-starter-log4j2</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><pre><code>xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容；</code></pre><h3 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.resources"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//可以设置和静态资源有关的参数，缓存时间等</span></code></pre><pre class=" language-java"><code class="language-java">    WebMvcAuotConfiguration：        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Integer cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCachePeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">/</span><span class="token operator">/</span>静态资源文件夹映射            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">/</span>配置欢迎页映射        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> WelcomePageHandlerMapping <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span>                ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token operator">/</span><span class="token operator">/</span>配置喜欢的图标        <span class="token annotation punctuation">@Configuration</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.mvc.favicon.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FaviconConfiguration</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">FaviconConfiguration</span><span class="token punctuation">(</span>ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> SimpleUrlHandlerMapping <span class="token function">faviconHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SimpleUrlHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">/</span><span class="token operator">/</span>所有  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico                 mapping<span class="token punctuation">.</span><span class="token function">setUrlMap</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"**/favicon.ico"</span><span class="token punctuation">,</span>                        <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> ResourceHttpRequestHandler <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ResourceHttpRequestHandler requestHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                requestHandler                        <span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getFaviconLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> requestHandler<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；</p><p>​    webjars：以jar包的方式引入静态资源；</p><p>​        比如我们加入了jquery的依赖,如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jquery-webjar--></span>在访问的时候只需要写webjars下面资源的名称即可        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="image/搜狗截图20180203164743.png" alt="搜狗截图20180203164743"></p><p>当我们访问localhost:8080/webjars/jquery/3.3.1/jquery.js路径的时候就能访问到jquery文件的东西</p><p>2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</p><p><img src="image/ResrouceProperties.png" alt="ResrouceProperties"></p><pre><code>&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径</code></pre><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p>3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射</p><p>​    localhost:8080/   找index页面</p><p>4）、所有的 **/favicon.ico  图标都是在静态资源文件下找。</p><p>总结：就是使用webjars/**就都去 classpath:/META-INF/resources/webjars/ 找资源；</p><p>​            使用/** 就是去静态文件下找资源</p><h3 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h3><p><img src="image/template-engine.png" alt="template-engine"></p><p>SpringBoot推荐的Thymeleaf；语法更简单，功能更强大；</p><h4 id="1、引入thymeleaf模板引擎"><a href="#1、引入thymeleaf模板引擎" class="headerlink" title="1、引入thymeleaf模板引擎"></a>1、引入thymeleaf模板引擎</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>切换thymeleaf版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf.version</span><span class="token punctuation">></span></span>3.0.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf.version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --></span>    <span class="token comment" spellcheck="true">&lt;!-- thymeleaf2   layout1--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h4 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h4><p>在spring-boot-autoconfigure-2.0.4.RELEASE.jar中有对Thymeleaf的具体配置</p><p><img src="image/Thymeleaf.png" alt="Thymeleaf"></p><p>@Configuration<br>@EnableConfigurationProperties(ThymeleafProperties.class)<br>@ConditionalOnClass(TemplateMode.class)<br>@AutoConfigureAfter({ WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class })<br>public class ThymeleafAutoConfiguration {</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"defaultTemplateResolver"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultTemplateResolverConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Log logger <span class="token operator">=</span> LogFactory            <span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span>DefaultTemplateResolverConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ThymeleafProperties properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这是对Thymeleaf的具体的配置类</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationContext applicationContext<span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING <span class="token operator">=</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是读取thml的前缀</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这是后缀</span></code></pre><p>就是读取classpath:/templates/  内路径下的templates文件夹中的文件</p><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><ol><li>导入thymeleaf的命名空间 ，导入就会有语法提示</li></ol><h4 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h4><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="image/thy.png" alt="thy"></p><p>2）、表达式？</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">Simple</span> <span class="token attr-value">expressions:（表达式语法）</span><span class="token attr-name">    Variable</span> <span class="token attr-value">Expressions: ${...}：获取变量值；OGNL；</span>            1）、获取对象的属性、调用方法            2）、使用内置的基本对象：<span class="token comment" spellcheck="true">                #ctx : the context object.</span><span class="token comment" spellcheck="true">                #vars: the context variables.</span><span class="token comment" spellcheck="true">                #locale : the context locale.</span><span class="token comment" spellcheck="true">                #request : (only in Web Contexts) the HttpServletRequest object.</span><span class="token comment" spellcheck="true">                #response : (only in Web Contexts) the HttpServletResponse object.</span><span class="token comment" spellcheck="true">                #session : (only in Web Contexts) the HttpSession object.</span><span class="token comment" spellcheck="true">                #servletContext : (only in Web Contexts) the ServletContext object.</span>                ${session.foo}            3）、内置的一些工具对象：<span class="token comment" spellcheck="true">#execInfo : information about the template being processed.</span><span class="token comment" spellcheck="true">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{…} syntax.</span><span class="token comment" spellcheck="true">#uris : methods for escaping parts of URLs/URIs</span><span class="token comment" spellcheck="true">#conversions : methods for executing the configured conversion service (if any).</span><span class="token comment" spellcheck="true">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><span class="token comment" spellcheck="true">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><span class="token comment" spellcheck="true">#numbers : methods for formatting numeric objects.</span><span class="token comment" spellcheck="true">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><span class="token comment" spellcheck="true">#objects : methods for objects in general.</span><span class="token comment" spellcheck="true">#bools : methods for boolean evaluation.</span><span class="token comment" spellcheck="true">#arrays : methods for arrays.</span><span class="token comment" spellcheck="true">#lists : methods for lists.</span><span class="token comment" spellcheck="true">#sets : methods for sets.</span><span class="token comment" spellcheck="true">#maps : methods for maps.</span><span class="token comment" spellcheck="true">#aggregates : methods for creating aggregates on arrays or collections.</span><span class="token comment" spellcheck="true">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><span class="token attr-name">    Selection</span> <span class="token attr-value">Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；</span><span class="token attr-name">        补充：配合</span> <span class="token attr-value">th:object="${session.user}：</span><span class="token attr-name">   &lt;div</span> <span class="token attr-value">th:object="${session.user}"></span><span class="token attr-name">    &lt;p>Name</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{firstName}">Sebastian&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Surname</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{lastName}">Pepper&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Nationality</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{nationality}">Saturn&lt;/span>.&lt;/p></span>    &lt;/div><span class="token attr-name">    Message</span> <span class="token attr-value">Expressions: #{...}：获取国际化内容</span><span class="token attr-name">    Link</span> <span class="token attr-value">URL Expressions: @{...}：定义URL；</span><span class="token attr-name">            @{/order/process(execId</span><span class="token punctuation">=</span><span class="token attr-value">${execId},execType='FAST')}</span><span class="token attr-name">    Fragment</span> <span class="token attr-value">Expressions: ~{...}：片段引用表达式</span><span class="token attr-name">            &lt;div</span> <span class="token attr-value">th:insert="~{commons :: main}">...&lt;/div></span>Literals（字面量）<span class="token attr-name">      Text</span> <span class="token attr-value">literals: 'one text' , 'Another one!' ,…</span><span class="token attr-name">      Number</span> <span class="token attr-value">literals: 0 , 34 , 3.0 , 12.3 ,…</span><span class="token attr-name">      Boolean</span> <span class="token attr-value">literals: true , false</span><span class="token attr-name">      Null</span> <span class="token attr-value">literal: null</span><span class="token attr-name">      Literal</span> <span class="token attr-value">tokens: one , sometext , main ,…</span><span class="token attr-name">Text</span> <span class="token attr-value">operations:（文本操作）</span><span class="token attr-name">    String</span> <span class="token attr-value">concatenation: +</span><span class="token attr-name">    Literal</span> <span class="token attr-value">substitutions: |The name is ${name}|</span><span class="token attr-name">Arithmetic</span> <span class="token attr-value">operations:（数学运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: + , - , * , / , %</span><span class="token attr-name">    Minus</span> <span class="token attr-value">sign (unary operator): -</span><span class="token attr-name">Boolean</span> <span class="token attr-value">operations:（布尔运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: and , or</span><span class="token attr-name">    Boolean</span> <span class="token attr-value">negation (unary operator): ! , not</span><span class="token attr-name">Comparisons</span> <span class="token attr-value">and equality:（比较运算）</span><span class="token attr-name">    Comparators</span><span class="token punctuation">:</span> <span class="token attr-value">> , &lt; , >= , &lt;= ( gt , lt , ge , le )</span><span class="token attr-name">    Equality</span> <span class="token attr-value">operators: == , != ( eq , ne )</span><span class="token attr-name">Conditional</span> <span class="token attr-value">operators:条件运算（三元运算符）</span><span class="token attr-name">    If-then</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then)</span><span class="token attr-name">    If-then-else</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then) : (else)</span><span class="token attr-name">    Default</span><span class="token punctuation">:</span> <span class="token attr-value">(value) ?: (defaultvalue)</span><span class="token attr-name">Special</span> <span class="token attr-value">tokens:</span><span class="token attr-name">    No-Operation</span><span class="token punctuation">:</span> <span class="token attr-value">_ </span></code></pre><h3 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h3><h4 id="1、Spring-MVC-auto-configuration"><a href="#1、Spring-MVC-auto-configuration" class="headerlink" title="1、Spring MVC auto-configuration"></a>1、Spring MVC auto-configuration</h4><p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.</p><p>Spring Boot 提供了很多自动配置的默认配置在springmv中</p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><p>在spring-boot-autoconfigure-2.0.4.RELEASE.jar中的WebMvcAutoConfiguration.class中</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>ViewResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"viewResolver"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> ContentNegotiatingViewResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> ContentNegotiatingViewResolver <span class="token function">viewResolver</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ContentNegotiatingViewResolver resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentNegotiatingViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">setContentNegotiationManager</span><span class="token punctuation">(</span>                beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ContentNegotiationManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ContentNegotiatingViewResolver uses all the other view resolvers to locate</span>        <span class="token comment" spellcheck="true">// a view so it should have a high precedence</span>        resolver<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resolver<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里就是在加载ViewResolver视图解析器。</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContentNegotiatingViewResolver</span> <span class="token keyword">extends</span> <span class="token class-name">WebApplicationObjectSupport</span>        <span class="token keyword">implements</span> <span class="token class-name">ViewResolver</span><span class="token punctuation">,</span> Ordered<span class="token punctuation">,</span> InitializingBean <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> ContentNegotiationManager contentNegotiationManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ContentNegotiationManagerFactoryBean cnmFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentNegotiationManagerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useNotAcceptableStatusCode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>View<span class="token operator">></span> defaultViews<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>ViewResolver<span class="token operator">></span> viewResolvers<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里就会得到所有的ViewResolver包括我们自己添加的viewResolver</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> order <span class="token operator">=</span> Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">;</span></code></pre><p><img src="image/myViewResolver.png" alt="myViewResolver"> </p><p>定义了之后在我们访问的时候，dispatcherServlet dedug时就可以看到，就会加载我们自己的ViewResolver</p><p><img src="image/doDispatch.png" alt="doDispatch"></p><p>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染页面（转发？重定向？））</p><p>ContentNegotiatingViewResolver：组合所有的视图解析器；</p><p>如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；</p></li><li><p>Support for serving static resources, including support for WebJars (see below). </p><p>静态资源文件夹路径,webjars</p></li><li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><p>​     Converter：转换器；  public String hello(User user)：类型转换使用Converter</p><p>​     Formatter`  格式化器；  2017.12.17===Date；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"date-format"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在文件中配置日期格式化的规则</span><span class="token keyword">public</span> Formatter<span class="token operator">&lt;</span>Date<span class="token operator">></span> <span class="token function">dateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期格式化组件</span><span class="token punctuation">}</span></code></pre><p>​     同样如ViewResolver 自己添加的格式化器转换器，我们只需要放在容器中即可</p></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> MessageCodesResolver <span class="token function">getMessageCodesResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getMessageCodesResolverFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultMessageCodesResolver resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMessageCodesResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">setMessageCodeFormatter</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getMessageCodesResolverFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span>FormatterRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Converter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> converter <span class="token operator">:</span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span>Converter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>GenericConverter converter <span class="token operator">:</span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span>GenericConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Formatter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> formatter <span class="token operator">:</span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span>Formatter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addFormatter</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这是生成错误代码规则器    </span><span class="token keyword">public</span> <span class="token keyword">enum</span> Format <span class="token keyword">implements</span> <span class="token class-name">MessageCodeFormatter</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * Prefix the error code at the beginning of the generated message code. e.g.:         * {@code errorCode + "." + object name + "." + field}         */</span>        PREFIX_ERROR_CODE <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">format</span><span class="token punctuation">(</span>String errorCode<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String objectName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String field<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">toDelimitedString</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * Postfix the error code at the end of the generated message code. e.g.:         * {@code object name + "." + field + "." + errorCode}         */</span>        POSTFIX_ERROR_CODE <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">format</span><span class="token punctuation">(</span>String errorCode<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String objectName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String field<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">toDelimitedString</span><span class="token punctuation">(</span>objectName<span class="token punctuation">,</span> field<span class="token punctuation">,</span> errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p> 同样如ViewResolver 自己添加的格式化器转换器，我们只需要放在容器中即可</p></li><li><p>Support for <code>HttpMessageConverters</code> (see below).   </p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">WebMvcAutoConfigurationAdapter</span><span class="token punctuation">(</span>ResourceProperties resourceProperties<span class="token punctuation">,</span>                WebMvcProperties mvcProperties<span class="token punctuation">,</span> ListableBeanFactory beanFactory<span class="token punctuation">,</span>                ObjectProvider<span class="token operator">&lt;</span>HttpMessageConverters<span class="token operator">></span> messageConvertersProvider<span class="token punctuation">,</span>                ObjectProvider<span class="token operator">&lt;</span>ResourceHandlerRegistrationCustomizer<span class="token operator">></span> resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties <span class="token operator">=</span> mvcProperties<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>messageConvertersProvider <span class="token operator">=</span> messageConvertersProvider<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourceHandlerRegistrationCustomizer <span class="token operator">=</span> resourceHandlerRegistrationCustomizerProvider                    <span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>Static <code>index.html</code> support. // 访问欢迎页面</p></li><li><p>Custom <code>Favicon</code> support (see below). // 访问图标</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below). 初始化webdatabinder</p><p>初始化web数据的绑定器，绑定数据到自己的类  请求数据——–&gt;JavaBean；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> ConfigurableWebBindingInitializer <span class="token function">getConfigurableWebBindingInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ConfigurableWebBindingInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ConfigurableWebBindingInitializer.class 中的initBinder就是在绑定数据</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getConfigurableWebBindingInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="2、扩展springmvc"><a href="#2、扩展springmvc" class="headerlink" title="2、扩展springmvc"></a>2、扩展springmvc</h4><p>以前在我们配置springmvc的时候，是在spring-mvc.xml中去配置比如</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 配置一个视图的解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置一个拦截器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>现在在springboot中我们可以去编写一个配置类，是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc。就会既保留原有的配置，又会实现我们自己的配置。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 去设置在一个路径为/test controller中的返回的视图名为index的页面</span>        <span class="token comment" spellcheck="true">// setViewName("index")也是根据对Thymeleaf的具体的配置类的路径在classpath:templates下</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>原理：</p><p>   WebMvcAutoConfiguration是SpringMVC的自动配置类,在该类中有一个WebMvcAutoConfigurationAdapter的静态内部类，该类导入了一个EnableWebMvcConfiguration.class的类，也是一个配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnableWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> WebMvcConfigurerComposite configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在它的父类DelegatingWebMvcConfiguration中 ,在他的setConfigurers方法中就会加上所有的关于springmvc 的WebMvcConfigurer配置类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> WebMvcConfigurerComposite configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>WebMvcConfigurer<span class="token operator">></span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">.</span><span class="token function">addWebMvcConfigurers</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Defined as a nested config to ensure WebMvcConfigurer is not read when not</span>    <span class="token comment" spellcheck="true">// on the classpath</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> WebMvcProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ResourceProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span>            <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">,</span> ResourceLoaderAware <span class="token punctuation">{</span></code></pre><p>​        容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h4 id="3、全面接管SpringMVC"><a href="#3、全面接管SpringMVC" class="headerlink" title="3、全面接管SpringMVC"></a>3、全面接管SpringMVC</h4><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心，在上面导入了一个springmv最基本的配置类。DelegatingWebMvcConfiguration.class包含了异步、拦截器、转换器等等</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>DelegatingWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span></code></pre><p>2）、DelegatingWebMvcConfiguration继承了WebMvcConfigurationSupport</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span></code></pre><p>3）、</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        WebMvcConfigurerAdapter<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 容器中没有这个组件的时候，这个自动配置类才生效，所以我们配置了@EnableWebMvc后就会有WebMvcConfigurationSupport类</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h3 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h3><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h3 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h3><h4 id="1、默认访问首页"><a href="#1、默认访问首页" class="headerlink" title="1、默认访问首页"></a>1、默认访问首页</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 去设置在一个路径为/test controller中的返回的视图名为index的页面</span>        <span class="token comment" spellcheck="true">// setViewName("index")也是根据对Thymeleaf的具体的配置类的路径在classpath:templates下</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自动会加载去访问根路径的时候加载登录页面</span>    <span class="token comment" spellcheck="true">// 所有的WebMvcConfigurer都会被加入默认配置</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> WebMvcConfigurer <span class="token function">getWebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        WebMvcConfigurer webMvcConfigurerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> webMvcConfigurerAdapter<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="2、国际化"><a href="#2、国际化" class="headerlink" title="2、国际化"></a>2、国际化</h4><p>1）编写国际化配置文件；</p><p>2）使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）在页面使用fmt:message取出国际化内容</p><p><img src="image/login.properties.png" alt="login.properties"></p><p>在login.properties中为默认的配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">请登录~</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名~</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">密码~</span><span class="token attr-name">login.sign</span><span class="token punctuation">=</span><span class="token attr-value">登录~</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">记住密码~</span></code></pre><p>login_en_US.properties为英语版</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">Please sign in</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">Username</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">Password</span><span class="token attr-name">login.sign</span><span class="token punctuation">=</span><span class="token attr-value">Sign In</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">Remeenber Me</span></code></pre><p>login_zh_CN.properties为中文版</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">login.tip</span><span class="token punctuation">=</span><span class="token attr-value">请登录</span><span class="token attr-name">login.username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span><span class="token attr-name">login.password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span class="token attr-name">login.sign</span><span class="token punctuation">=</span><span class="token attr-value">登录</span><span class="token attr-name">login.remember</span><span class="token punctuation">=</span><span class="token attr-value">记住密码</span></code></pre><p>在springboot中自动帮我们配置好了国际化资源文件的组件, 在</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MessageSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>ResourceBundleCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> NO_RESOURCES <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn't contain a package qualifier (such as     * "org.mypackage"), it will be resolved from the classpath root.     */</span>    <span class="token comment" spellcheck="true">// 在这里它引入了一个MessageSourceProperties,如下，</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> MessageSourceProperties <span class="token function">messageSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MessageSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MessageSourceProperties properties <span class="token operator">=</span> <span class="token function">messageSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置国际化资源文件的基础名（去掉语言国家代码的）</span>            messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>                    StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Duration cacheDuration <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getCacheDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheDuration <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setCacheMillis</span><span class="token punctuation">(</span>cacheDuration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setUseCodeAsDefaultMessage</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isUseCodeAsDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>MessageSourceProperties</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn't contain a package qualifier (such as     * "org.mypackage"), it will be resolved from the classpath root.     */</span>    <span class="token comment" spellcheck="true">// 默认的国际化文件的基础名</span>    <span class="token comment" spellcheck="true">// 我们的配置文件可以直接放在类路径下叫messages.properties；</span>    <span class="token keyword">private</span> String basename <span class="token operator">=</span> <span class="token string">"messages"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Message bundles encoding.     */</span>    <span class="token keyword">private</span> Charset encoding <span class="token operator">=</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Loaded resource bundle files cache duration. When not set, bundles are cached     * forever. If a duration suffix is not specified, seconds will be used.     */</span></code></pre><p>相当于我们直接使用国际化的功能时直接在类路径中以messages.properties就可以了。</p><p>如果要找到我们自己的如：login.properties 需要在Application.properties中加入</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">i18n.login </span></code></pre><p>在Thymeleaf中就可以使用th:text=”#{}”来取值</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/webjars/bootstrap/4.1.3/css/bootstrap.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/css/signin.css}<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/signin.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/img/bootstrap-solid.svg}<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/img/bootstrap-solid.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.tip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[#{login.remember}]]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.sign}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>实现效果：根据浏览器语言设置的信息切换了国际化；在我们切换浏览器对的语言时就可以动态切换页面的语言</p><p>当请求头为英文时，即浏览器语言为英语时，就会en_US开头。</p><p><img src="image/en_US.png" alt="en_US"></p><p>显示为</p><p><img src="image/english.png" alt="english"></p><p>当请求头为中文时，即浏览器语言为中文时，就会zh_CN开头</p><p><img src="image/zh_CN.png" alt="zh_CN"></p><p>显示为<img src="/Chinese.png" alt="Chinese"></p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><p>在WebMvcAutoConfiguration中有localeResolver（）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span><span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties            <span class="token punctuation">.</span><span class="token function">getLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WebMvcProperties<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FixedLocaleResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果说是固定的LocaleResolver就用固定的，不然就在AcceptHeaderLocaleResolver去解析</span>    AcceptHeaderLocaleResolver localeResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptHeaderLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localeResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> localeResolver<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在AcceptHeaderLocaleResolver这个类中的resolveLocale方法就是在拿到request去解析请求头的语言信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Locale defaultLocale <span class="token operator">=</span> <span class="token function">getDefaultLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultLocale <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Accept-Language"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Locale requestLocale <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Locale<span class="token operator">></span> supportedLocales <span class="token operator">=</span> <span class="token function">getSupportedLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportedLocales<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> supportedLocales<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>requestLocale<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> requestLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Locale supportedLocale <span class="token operator">=</span> <span class="token function">findSupportedLocale</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> supportedLocales<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportedLocale <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> supportedLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>defaultLocale <span class="token operator">!=</span> null <span class="token operator">?</span> defaultLocale <span class="token operator">:</span> requestLocale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>设置点击链接切换国际化，我们就可以不用spingboot默认的区域解析器，不让使用上面的该方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span><span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以在链接上携带区域信息。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/login.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>zh_CN<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/login.html(l<span class="token punctuation">=</span><span class="token punctuation">'</span>en_US<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>再实现我们自己的LocalResolver</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 可以在链接上携带区域信息，实现resolveLocal方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String l <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub        </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同时将我们自己的LocaleResolver注入在容器中</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 去设置在一个路径为/test controller中的返回的视图名为index的页面</span>        <span class="token comment" spellcheck="true">// setViewName("index")也是根据对Thymeleaf的具体的配置类的路径在classpath:templates下</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自动会加载去访问根路径的时候加载登录页面</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> WebMvcConfigurer <span class="token function">getWebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        WebMvcConfigurer webMvcConfigurerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> webMvcConfigurerAdapter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 同时注入在容器中方法名 只能为localeResolver 不能为getLocaleResolver及其他方法</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3、登陆"><a href="#3、登陆" class="headerlink" title="3、登陆"></a>3、登陆</h4><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）禁用模板引擎的缓存</p><pre><code># 禁用缓存spring.thymeleaf.cache=false </code></pre><p>2）页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #strings.isEmpty(msg)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h4 id="4、热部署"><a href="#4、热部署" class="headerlink" title="4、热部署"></a>4、热部署</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- optional=true, 依赖不会传递, 该项目依赖devtools; 之后依赖boot项目的项目如果想要使用devtools, 需要重新引入 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## 在application.properties中</span><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false </span><span class="token attr-name">spring.devtools.restart.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.devtools.restart.additional-paths</span><span class="token punctuation">=</span><span class="token attr-value">src/main/java</span></code></pre><h4 id="5、拦截器进行登陆检查"><a href="#5、拦截器进行登陆检查" class="headerlink" title="5、拦截器进行登陆检查"></a>5、拦截器进行登陆检查</h4><p>拦截器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>staticResrouce<span class="token punctuation">.</span>po<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span><span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"请先登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册拦截器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>staticResrouce<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ViewControllerRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>staticResrouce<span class="token punctuation">.</span>component<span class="token punctuation">.</span>MyLocaleResolver<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>staticResrouce<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>LoginHandlerInterceptor<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 去设置在一个路径为/test controller中的返回的视图名为index的页面</span>        <span class="token comment" spellcheck="true">// setViewName("index")也是根据对Thymeleaf的具体的配置类的路径在classpath:templates下</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自动会加载去访问根路径的时候加载登录页面</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> WebMvcConfigurer <span class="token function">getWebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        WebMvcConfigurer webMvcConfigurerAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/main.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"dashboard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//SpringBoot已经做好了静态资源映射</span>                registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginHandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> webMvcConfigurerAdapter<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注入在容器中</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6、thymeleaf公共页面元素抽取"><a href="#6、thymeleaf公共页面元素抽取" class="headerlink" title="6、thymeleaf公共页面元素抽取"></a>6、thymeleaf公共页面元素抽取</h4><pre class=" language-html"><code class="language-html">1、抽取公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>2、引入公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{footer :: copy}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>~{templatename::selector}：模板名::选择器~{templatename::fragmentname}:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~{}：行内写法可以加上：[[~{}]];[(~{})]；</code></pre><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>引入片段的时候传入参数： </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-2 d-none d-md-block bg-light sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar-sticky<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav flex-column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span>                   <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${activeUri<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>main.html<span class="token punctuation">'</span>?<span class="token punctuation">'</span>nav-link active<span class="token punctuation">'</span>:<span class="token punctuation">'</span>nav-link<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span>                   <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/main.html}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 24 24<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linecap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linejoin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feather feather-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polyline</span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9 22 9 12 15 12 15 22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>polyline</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>                    Dashboard <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(current)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入侧边栏;传入参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commons/bar::#sidebar(activeUri<span class="token punctuation">=</span><span class="token punctuation">'</span>emps<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="7、SpringBoot默认的错误处理机制"><a href="#7、SpringBoot默认的错误处理机制" class="headerlink" title="7、SpringBoot默认的错误处理机制"></a>7、SpringBoot默认的错误处理机制</h3><p>springboot在错误的处理上设置了一个默认的页面：</p><p>​      1）、浏览器，返回一个默认的错误页面</p><p><img src="/image/1536583838088.png" alt="1536583838088">当浏览器发送请求时，会是text/html的，浏览器发送请求的请求头：</p><p><img src="image/1536583930610.png" alt="1536583930610"></p><p>​    2）、如果是其他客户端，比如安卓手机的请求等，默认响应一个json数据</p><p><img src="image/1536584094419.png" alt="1536584094419"></p><p>原理：</p><p>​    可以参照springboot的ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>  给容器中添加了以下组件</code></pre><p>1、ErrorPageCustomizer：</p><p>在ErrorMvcAutoConfiguration中有一个ErrorPageCustomizer的静态内部类，他的作用就是在发生4xx或5xx错误时来进行处理，他的方法registerErrorPages就会注册一个error的请求，相当于在web.xml中写一个错误请求一样。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Load before the main WebMvcAutoConfiguration so that the error View is available</span><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span>WebMvcAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ResourceProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorMvcAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ServerProperties serverProperties<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ErrorViewResolver<span class="token operator">></span> errorViewResolvers<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * {@link EmbeddedServletContainerCustomizer} that configures the container's error     * pages.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ErrorPageCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">ErrorPageRegistrar</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ServerProperties properties<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token function">ErrorPageCustomizer</span><span class="token punctuation">(</span>ServerProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerErrorPages</span><span class="token punctuation">(</span>ErrorPageRegistry errorPageRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ErrorPage errorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorPage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getServletPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            errorPageRegistry<span class="token punctuation">.</span><span class="token function">addErrorPages</span><span class="token punctuation">(</span>errorPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p>在上面的registerErrorPages方法中会得到一个ErrorProperties中的path在没有时默认为/error路径的请求，也可以自己在 properties中定义path，就回去请求该路径的controller的请求</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Path of the error controller.     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${error.path:/error}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String path <span class="token operator">=</span> <span class="token string">"/error"</span><span class="token punctuation">;</span></code></pre><p>2、BasicErrorController：处理默认/error请求，默认路径为/error,就会来到BasicErrorController中去处理请求.</p><p>BasicErrorController如下，其实他就是一个controller，他的requestMapping就是默认为/error的。我们也可以配置路径在properties中。其中就有两种方式的处理，一种是对浏览器的访问的处理，一种是对客户端的访问处理。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"${server.error.path:${error.path:/error}}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicErrorController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractErrorController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>produces <span class="token operator">=</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">errorHtml</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>            HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpStatus status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>                request<span class="token punctuation">,</span> <span class="token function">isIncludeStackTrace</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>TEXT_HTML<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去哪个页面作为错误页面；包含页面地址和页面内容</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">:</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token comment" spellcheck="true">//产生json数据，其他客户端来到这个方法处理；</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">error</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>                <span class="token function">isIncludeStackTrace</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpStatus status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、DefaultErrorViewResolver：去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultErrorViewResolverConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>    <span class="token function">DefaultErrorViewResolverConfiguration</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">,</span>            ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Bean</span>     <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> DefaultErrorViewResolver <span class="token function">conventionErrorViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultErrorViewResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个方法中有对4xx、5xx的处理，当发生什么错误的时候，就会传入一个状态码，如果在我们的页面中有对应的状态码的页面html就回去访问该页面，比如404的错误如果有404.html的页面的话，就会去访问该页面</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultErrorViewResolver</span> <span class="token keyword">implements</span> <span class="token class-name">ErrorViewResolver</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Series<span class="token punctuation">,</span> String<span class="token operator">></span> SERIES_VIEWS<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Series<span class="token punctuation">,</span> String<span class="token operator">></span> views <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Series<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        views<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Series<span class="token punctuation">.</span>CLIENT_ERROR<span class="token punctuation">,</span> <span class="token string">"4xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        views<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Series<span class="token punctuation">.</span>SERVER_ERROR<span class="token punctuation">,</span> <span class="token string">"5xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SERIES_VIEWS <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>views<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpStatus status<span class="token punctuation">,</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ModelAndView <span class="token function">resolve</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String errorViewName <span class="token operator">=</span> <span class="token string">"error/"</span> <span class="token operator">+</span> viewName<span class="token punctuation">;</span>        TemplateAvailabilityProvider provider <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateAvailabilityProviders                <span class="token punctuation">.</span><span class="token function">getProvider</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">resolveResource</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ModelAndView <span class="token function">resolveResource</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String location <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Resource resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>                resource <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">createRelative</span><span class="token punctuation">(</span>viewName <span class="token operator">+</span> <span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlResourceView</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、DefaultErrorAttributes：帮我们定制错误页面的信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultErrorAttributes</span>        <span class="token keyword">implements</span> <span class="token class-name">ErrorAttributes</span><span class="token punctuation">,</span> HandlerExceptionResolver<span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实现了ErrorAttributes的接口</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>RequestAttributes requestAttributes<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> errorAttributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorAttributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"timestamp"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回时间戳 </span>        <span class="token function">addStatus</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回错误的状态码</span>        <span class="token function">addErrorDetails</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回错误请求详情，报错了对异常的捕获，返回异常信息。</span>        <span class="token function">addPath</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回错误的访问路径</span>        <span class="token keyword">return</span> errorAttributes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><h4 id="1、如何定制错误响应"><a href="#1、如何定制错误响应" class="headerlink" title="1、如何定制错误响应"></a>1、如何定制错误响应</h4><h5 id="1、如何定制错误的页面"><a href="#1、如何定制错误的页面" class="headerlink" title="1、如何定制错误的页面"></a><strong>1、如何定制错误的页面</strong></h5><p>1）、有模板引擎的情况下；error/状态码;【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p><img src="image/1536587540647.png" alt="1536587540647"></p><p>​     2、 我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；</p><p>DefaultErrorAttributes：帮我们定制错误页面的信息，在其中都有对信息的处理比如：        </p><p>​    timestamp：时间戳</p><p>​    status：状态码</p><p>​    error：错误提示</p><p>​        exception：异常对象</p><p>​    message：异常消息</p><p>​    errors：JSR303数据校验的错误都在这里</p><p>我们定义一个4xx.html页面</p><p><img src="image/1536588284873.png" alt="1536588284873"></p><p>页面中写上自己有的几个属性</p><p><img src="image/1536588332919.png" alt="1536588332919"></p><p>就会有定制的属性的信息了</p><p><img src="image/1536588385988.png" alt="1536588385988"></p><p>2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p><p>3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p><p>在ErrorMvcAutoConfiguation中,就有一个默认拼接的html页面，就是我们之前看到的错误页面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"server.error.whitelabel"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>ErrorTemplateMissingCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WhitelabelErrorViewConfiguration</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> SpelView defaultErrorView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelView</span><span class="token punctuation">(</span>                <span class="token string">"&lt;html>&lt;body>&lt;h1>Whitelabel Error Page&lt;/h1>"</span>                        <span class="token operator">+</span> <span class="token string">"&lt;p>This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p>"</span>                        <span class="token operator">+</span> <span class="token string">"&lt;div id='created'>${timestamp}&lt;/div>"</span>                        <span class="token operator">+</span> <span class="token string">"&lt;div>There was an unexpected error (type=${error}, status=${status}).&lt;/div>"</span>                        <span class="token operator">+</span> <span class="token string">"&lt;div>${message}&lt;/div>&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 来到error的bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"error"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> View <span class="token function">defaultErrorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultErrorView<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// If the user adds @EnableWebMvc then the bean name view resolver from</span>        <span class="token comment" spellcheck="true">// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>BeanNameViewResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> BeanNameViewResolver <span class="token function">beanNameViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            BeanNameViewResolver resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanNameViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resolver<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2、如何定制错误的json数据；"><a href="#2、如何定制错误的json数据；" class="headerlink" title="2、如何定制错误的json数据；"></a>2、如何定制错误的json数据；</h5><p>   1、我们可以自定义异常</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"测试异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  2、当springmvc捕获异常的时候就可以去得到massage和exception的信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 访问时抛出异常，在5xx.html中就能返回异常信息</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 ml-sm-auto col-lg-10 pt-3 px-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>status:[[${status}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>timestamp:[[${timestamp}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>message:[[${message}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>exception:[[${exception}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></code></pre><p>访问时显示的样式：</p><p><img src="image/1536590374262.png" alt="1536590374262"></p><p>客户端访问返回的是:就没有我们自己定义的效果了</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"2018-09-10T14:40:51.329+0000"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"Internal Server Error"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"测试异常"</span><span class="token punctuation">,</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/crud/hello"</span><span class="token punctuation">}</span></code></pre><p>我们可以定制一个异常处理器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span> <span class="token comment" spellcheck="true">// 表示为spingmvc的异常处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionHandle</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@ResponseBody</span>  <span class="token comment" spellcheck="true">// 这种方式都是返回的json数据，就没有返回页面了，</span>     <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MyException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"测试500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当返回时就可以是自己定制的样式了。 但是这种方式都是返回的json数据，就没有返回页面了，</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"测试500"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"测试异常"</span><span class="token punctuation">}</span></code></pre><p>我们可以转发到/error路径，在BasicErrorController中有对html和json的区分</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span> <span class="token comment" spellcheck="true">// 表示为spingmvc的异常处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionHandle</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*     @ResponseBody     @ExceptionHandler(MyException.class)     public Map&lt;String,Object> handleException(Exception e){        Map&lt;String,Object> map = new HashMap&lt;>();        map.put("code","测试500");        map.put("message",e.getMessage());        return map;    }*/</span>     <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MyException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"测试500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>返回的页面和json为：</p><p><img src="image/1536591930492.png" alt="1536591930492"></p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token string">"timestamp"</span><span class="token operator">:</span> <span class="token string">"2018-09-10T15:04:17.121+0000"</span><span class="token punctuation">,</span>    <span class="token string">"status"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token string">"error"</span><span class="token operator">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>    <span class="token string">"message"</span><span class="token operator">:</span> <span class="token string">"测试异常"</span><span class="token punctuation">,</span>    <span class="token string">"path"</span><span class="token operator">:</span> <span class="token string">"/crud/hello"</span><span class="token punctuation">}</span></code></pre><p>这样的时候是不能得到正常的错误信息的，而且没有到我们的错误页面里面，status还是200成功对的状态。在BasicErrorController的解析的时候，会去得到状态码。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> HttpStatus <span class="token function">getStatus</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得状态码</span>        Integer statusCode <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> request                <span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> HttpStatus<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>所以我们需要自己去定义状态码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span> <span class="token comment" spellcheck="true">// 表示为spingmvc的异常处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionHandle</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*     @ResponseBody     @ExceptionHandler(MyException.class)     public Map&lt;String,Object> handleException(Exception e){        Map&lt;String,Object> map = new HashMap&lt;>();        map.put("code","测试500");        map.put("message",e.getMessage());        return map;    }*/</span>     <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MyException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"测试500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样就能到我们的页面，显示我们自己输入的状态码</p><p><img src="image/1536592821662.png" alt="1536592821662"></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"2018-09-10T15:17:49.682+0000"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"Internal Server Error"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"测试异常"</span><span class="token punctuation">,</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/crud/hello"</span><span class="token punctuation">}</span></code></pre><p>不过这样还是没有带上我们自己定义的信息数据。</p><h5 id="3、将我们的定制数据携带出去；"><a href="#3、将我们的定制数据携带出去；" class="headerlink" title="3、将我们的定制数据携带出去；"></a>3、将我们的定制数据携带出去；</h5><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>staticResrouce<span class="token punctuation">.</span>component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>error<span class="token punctuation">.</span>DefaultErrorAttributes<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>WebRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给容器中加入我们自己定义的ErrorAttributes</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyErrorAttributes</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultErrorAttributes</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>WebRequest webRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> webRequest<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 0代表request作用域取值，1代表从session中取值  </span>      <span class="token keyword">return</span> map<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在myExceptionHandle中</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MyException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>   Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"测试500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//放在作用域中</span>    <span class="token keyword">return</span> <span class="token string">"forward:/error"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><p><img src="image/1536596018765.png" alt="1536596018765"></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"2018-09-10T16:13:53.264+0000"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"Internal Server Error"</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"测试异常"</span><span class="token punctuation">,</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/crud/hello"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"测试500"</span><span class="token punctuation">,</span>        <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"测试异常"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h3><p>SpringBoot默认是使用Tomcat作为嵌入式的Servlet容器。在spring-boot-starter-web中有一个spring-boot-starter-tomcat.</p><p><img src="image/1536671257583.png" alt="1536671257583"></p><h4 id="1、如何定制和修改Servlet容器的相关配置"><a href="#1、如何定制和修改Servlet容器的相关配置" class="headerlink" title="1、如何定制和修改Servlet容器的相关配置"></a>1、如何定制和修改Servlet容器的相关配置</h4><p>在ServerProperties中就有对server的配置,其中有一个tomcat的属性。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"server"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Server HTTP port.     */</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Network address to which the server should bind.     */</span>    <span class="token keyword">private</span> InetAddress address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NestedConfigurationProperty</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ErrorProperties error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在其中就有tomcat的一些配置</p><p><img src="image/1536672577772.png" alt="1536672577772"></p><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/crud</span><span class="token attr-name">server.tomcat.uri-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx</code></pre><p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置(springboot1.xx的方法，在2.xx已经不再使用)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>  <span class="token comment" spellcheck="true">//一定要将这个定制器加入到容器中</span><span class="token keyword">public</span> EmbeddedServletContainerCustomizer <span class="token function">embeddedServletContainerCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedServletContainerCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定制嵌入式的Servlet容器相关的规则</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableEmbeddedServletContainer container<span class="token punctuation">)</span> <span class="token punctuation">{</span>        container<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8083</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在TomcatServletWebServerFactoryCustomizer中的customize方法就会得到所有的配置。所以我们通过编程的方式去是设置servlet容器就可以去实现WebServerFactoryCustomizer，重写他的 customize方法。WebServerFactoryCustomizer就是TomcatServletWebServerFactoryCustomizer父类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatServletWebServerFactoryCustomizer</span>        <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token operator">&lt;</span>TomcatServletWebServerFactory<span class="token operator">></span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">final</span> ServerProperties serverProperties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">TomcatServletWebServerFactoryCustomizer</span><span class="token punctuation">(</span>ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties <span class="token operator">=</span> serverProperties<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>TomcatServletWebServerFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 得到tomcat的配置信息</span>    ServerProperties<span class="token punctuation">.</span>Tomcat tomcatProperties <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties<span class="token punctuation">.</span><span class="token function">getTomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tomcatProperties<span class="token punctuation">.</span><span class="token function">getAdditionalTldSkipPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        factory<span class="token punctuation">.</span><span class="token function">getTldSkipPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tomcatProperties<span class="token punctuation">.</span><span class="token function">getAdditionalTldSkipPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tomcatProperties<span class="token punctuation">.</span><span class="token function">getRedirectContextRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customizeRedirectContextRoot</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span>                tomcatProperties<span class="token punctuation">.</span><span class="token function">getRedirectContextRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tomcatProperties<span class="token punctuation">.</span><span class="token function">getUseRelativeRedirects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customizeUseRelativeRedirects</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span>                tomcatProperties<span class="token punctuation">.</span><span class="token function">getUseRelativeRedirects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果需要以编程方式配置嵌入式servlet容器，可以注册实现该<code>WebServerFactoryCustomizer</code>接口的Spring bean 。 <code>WebServerFactoryCustomizer</code>提供对其的访问<code>ConfigurableServletWebServerFactory</code>，其中包括许多自定义setter方法。以下示例以编程方式设置端口：同样和使用配置文件一样的效果。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizationBean</span> <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token operator">&lt;</span>ConfigurableServletWebServerFactory<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableServletWebServerFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8082</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也可以在配置类里面去编写代码</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> WebServerFactoryCustomizer<span class="token operator">&lt;</span>ConfigurableWebServerFactory<span class="token operator">></span> <span class="token function">webServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token operator">&lt;</span>ConfigurableWebServerFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableWebServerFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>                factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> ps：如果bean有一个构造函数，则可以省略<code>@Autowired</code>，默认去容器中取。如下例所示： </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseAccountService</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认去容器中取riskAssessor</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RiskAssessor riskAssessor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DatabaseAccountService</span><span class="token punctuation">(</span>RiskAssessor riskAssessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2、注册Servlet三大组件【Servlet、Filter、Listener】</h4><p>我们注册Servlet、Filter、Listener一般是在是在web.xml中。因为springboot默认是以jar包的方式启动嵌入式servlet容器来启动web应用。是没有web.xml的。所以springboot是通过:</p><p>1、ServletRegistrationBean</p><p>2、FilterRegistrationBean</p><p>3、ListenerRegistrationBean</p><p>来分别完成对三大组件的注册。</p><p><strong>ServletRegistrationBean</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义一个servlet</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean<span class="token operator">&lt;</span>MyServlet<span class="token operator">></span> <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注册自己的sevlet的访问路径</span>        ServletRegistrationBean<span class="token operator">&lt;</span>MyServlet<span class="token operator">></span> myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token operator">&lt;</span>MyServlet<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myServlet<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> myServlet<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>FilterRegistrationBean</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义一个自己的过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter proess..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放开过滤</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub    </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean<span class="token operator">&lt;</span>MyFilter<span class="token operator">></span> <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注册自己的filter</span>        FilterRegistrationBean<span class="token operator">&lt;</span>MyFilter<span class="token operator">></span> myFilterBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token operator">&lt;</span>MyFilter<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myFilterBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myFilterBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/servlet"</span><span class="token punctuation">,</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> myFilterBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>ListenerRegistrationBean</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义自己的listener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动时..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁时..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册ServletListenerRegistrationBean</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletListenerRegistrationBean<span class="token operator">&lt;</span>MyServletListener<span class="token operator">></span> <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token operator">&lt;</span>MyServletListener<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServletListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器:DIspatcherServlet</p><p>在DispatcherServletAutoConfiguration中：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> DispatcherServletRegistrationBean <span class="token function">dispatcherServletRegistration</span><span class="token punctuation">(</span>        DispatcherServlet dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DispatcherServletRegistrationBean registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServletRegistrationBean</span><span class="token punctuation">(</span>                    dispatcherServlet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span>    <span class="token comment" spellcheck="true">//可以通过server.path来修改SpringMVC前端控制器默认拦截的请求路径</span>            registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>            registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registration<span class="token punctuation">.</span><span class="token function">setMultipartConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> registration<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="3、替换为其他嵌入式Servlet容器"><a href="#3、替换为其他嵌入式Servlet容器" class="headerlink" title="3、替换为其他嵌入式Servlet容器"></a>3、替换为其他嵌入式Servlet容器</h4><p><img src="image/1536767670945.png" alt="1536767670945"></p><p>默认支持：</p><p>Tomcat（默认使用）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Jetty</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入web模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--排除默认的tomcat容器--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入其他的Servlet容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>效果：以jetty启动</p><p><img src="image/1536767802402.png" alt="1536767802402"></p><p>Undertow</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入web模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!--排除默认的tomcat容器--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入其他的Servlet容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>效果：以undertow启动</p><p><img src="image/1536767951786.png" alt="1536767951786"></p><h4 id="4、嵌入式Servlet容器自动配置原理"><a href="#4、嵌入式Servlet容器自动配置原理" class="headerlink" title="4、嵌入式Servlet容器自动配置原理"></a>4、嵌入式Servlet容器自动配置原理</h4><p>EmbeddedServletContainerAutoConfiguration</p><p>EmbeddedWebServerFactoryCustomizerAutoConfiguration：嵌入式的Servlet容器自动配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入BeanPostProcessorsRegistrar注册器：Spring注解版；给容器中导入一些组件</span><span class="token comment" spellcheck="true">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span><span class="token comment" spellcheck="true">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedServletContainerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前是否引入了Tomcat依赖；</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedTomcat</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 默认为创建tomcat的容器工厂</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="token function">tomcatEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Jetty is being used.     * 如果是 Server.class 等 就创建jetty的嵌入式容器工厂     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Server<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Loader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            WebAppContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedJetty</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> JettyEmbeddedServletContainerFactory <span class="token function">jettyEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Undertow is being used.     *  如果是  Undertow.class 等 就创建Undertow的嵌入式容器工厂     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Undertow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SslClientAuthMode<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedUndertow</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="token function">undertowEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UndertowEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>1、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmbeddedServletContainerFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Gets a new fully configured but paused {@link EmbeddedServletContainer} instance.     * Clients should not be able to connect to the returned server until     * {@link EmbeddedServletContainer#start()} is called (which happens when the     * {@link ApplicationContext} has been fully refreshed).     * @param initializers {@link ServletContextInitializer}s that should be applied as     * the container starts     * @return a fully configured and started {@link EmbeddedServletContainer}     * @see EmbeddedServletContainer#stop()     */</span>    <span class="token comment" spellcheck="true">//getEmbeddedServletContainer 获取嵌入式的web容器</span>    EmbeddedServletContainer <span class="token function">getEmbeddedServletContainer</span><span class="token punctuation">(</span>            ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="image/1537192791286.png" alt="1537192791286"></p><p>2、EmbeddedServletContainer：（嵌入式的Servlet容器）</p><p><img src="image/1537192957417.png" alt="1537192957417"></p><p>3、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例，在TomcatEmbeddedServletContainerFactory中</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> EmbeddedServletContainer <span class="token function">getEmbeddedServletContainer</span><span class="token punctuation">(</span>      ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个Tomcat</span>   Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置Tomcat的基本环节</span>   File baseDir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory         <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setBaseDir</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Connector connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">customizeConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">configureEngine</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector additionalConnector <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalTomcatConnectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>additionalConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span>   <span class="token keyword">return</span> <span class="token function">getTomcatEmbeddedServletContainer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建一个 TomcatEmbeddedServletContainer</span><span class="token keyword">protected</span> TomcatEmbeddedServletContainer <span class="token function">getTomcatEmbeddedServletContainer</span><span class="token punctuation">(</span>    Tomcat tomcat<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatEmbeddedServletContainer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">,</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、我们对嵌入式容器的配置修改是怎么生效的呢</p><p>就是在容器中添加ServerProperties、EmbeddedServletContainerCustomizer。</p><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Create a new {@link TomcatEmbeddedServletContainer} instance.     * @param tomcat the underlying Tomcat server     * @param autoStart if the server should be started     */</span>    <span class="token keyword">public</span> <span class="token function">TomcatEmbeddedServletContainer</span><span class="token punctuation">(</span>Tomcat tomcat<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">,</span> <span class="token string">"Tomcat Server must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tomcat <span class="token operator">=</span> tomcat<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>autoStart <span class="token operator">=</span> autoStart<span class="token punctuation">;</span>        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> EmbeddedServletContainerException <span class="token punctuation">{</span>    TomcatEmbeddedServletContainer<span class="token punctuation">.</span>logger        <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Tomcat initialized with port(s): "</span> <span class="token operator">+</span> <span class="token function">getPortsDescription</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>monitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">addInstanceIdToEngineName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> Context context <span class="token operator">=</span> <span class="token function">findContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LifecycleListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lifecycleEvent</span><span class="token punctuation">(</span>LifecycleEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token operator">&amp;&amp;</span> Lifecycle<span class="token punctuation">.</span>START_EVENT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Remove service connectors so that protocol</span>                            <span class="token comment" spellcheck="true">// binding doesn't happen when the service is</span>                            <span class="token comment" spellcheck="true">// started.</span>                            <span class="token function">removeServiceConnectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Start the server to trigger initialization listeners</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// We can re-throw failure exception directly in the main thread</span>                <span class="token function">rethrowDeferredStartupExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ContextBindings<span class="token punctuation">.</span><span class="token function">bindClassLoader</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token function">getNamingToken</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                    <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Naming is not enabled. Continue</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Unlike Jetty, all Tomcat threads are daemon threads. We create a</span>                <span class="token comment" spellcheck="true">// blocking non-daemon to stop immediate shutdown</span>                <span class="token function">startDaemonAwaitThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                containerCounter<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">stopSilently</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedServletContainerException</span><span class="token punctuation">(</span>                <span class="token string">"Unable to start embedded Tomcat"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>怎么修改的原理？</p><p>5、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><p>在自动配置类中导入了BeanPostProcessorsRegistrar注册器</p><p><img src="image/1537194003896.png" alt="1537194003896"></p><p>得到了BeanPostProcessor的子类<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedServletContainerCustomizerBeanPostProcessor</span>        <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">,</span> BeanFactoryAware <span class="token punctuation">{</span>    <span class="token keyword">private</span> ListableBeanFactory beanFactory<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>EmbeddedServletContainerCustomizer<span class="token operator">></span> customizers<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>ListableBeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">,</span>                <span class="token string">"EmbeddedServletContainerCustomizerBeanPostProcessor can only be used "</span>                        <span class="token operator">+</span> <span class="token string">"with a ListableBeanFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ListableBeanFactory<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableEmbeddedServletContainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurableEmbeddedServletContainer<span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>            ConfigurableEmbeddedServletContainer bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>EmbeddedServletContainerCustomizer customizer <span class="token operator">:</span> <span class="token function">getCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Collection<span class="token operator">&lt;</span>EmbeddedServletContainerCustomizer<span class="token operator">></span> <span class="token function">getCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Look up does not include the parent context</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>EmbeddedServletContainerCustomizer<span class="token operator">></span><span class="token punctuation">(</span>             <span class="token comment" spellcheck="true">// 从ioc容器中得到所有的嵌入式web容器的配置器EmbeddedServletContainerCustomizer </span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>EmbeddedServletContainerCustomizer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">,</span> AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回 一个List</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>步骤：</p><p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p><p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p><p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p><p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p><h4 id="5、嵌入式Servlet容器启动原理"><a href="#5、嵌入式Servlet容器启动原理" class="headerlink" title="5、嵌入式Servlet容器启动原理"></a>5、嵌入式Servlet容器启动原理</h4><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat？</p><p>获取嵌入式的Servlet容器工厂：</p><p>1.在springboot应用启动执行run方法。</p><p><img src="image/1537276330233.png" alt="1537276330233"></p><p>然后经过几个run方法</p><p><img src="image/1537276447091.png" alt="1537276447091"></p><p><img src="image/1537276483667.png" alt="1537276483667"></p><ol start="2"><li>进入创建IOC容器对象。refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplication</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     * Run the Spring application, creating and refreshing a new     * {@link ApplicationContext}.     * @param args the application arguments (usually passed from a Java main method)     * @return a running {@link ApplicationContext}     */</span>    <span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>SpringBootExceptionReporter<span class="token operator">></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>                    args<span class="token punctuation">)</span><span class="token punctuation">;</span>            ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span>                    applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>            Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>            context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>                    SpringBootExceptionReporter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ConfigurableApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span>                    printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//在这里调用了refreshContext（）方法。创建IOC容器</span>            <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>            stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建IOC容器</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refreshContext</span><span class="token punctuation">(</span>ConfigurableApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">refresh</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerShutdownHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccessControlException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Not allowed in some environments.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Refresh the underlying {@link ApplicationContext}.     * @param applicationContext the application context to refresh     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p>在AbstractApplicationContext的类中onRefresh()方法就是去创建servlet容器工厂的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultResourceLoader</span>        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Prepare this context for refreshing.</span>            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>                <span class="token comment" spellcheck="true">// 调用了自己方法，然后创建webserver容器工厂</span>                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>                <span class="token comment" spellcheck="true">// 这个方法是去创建我们自己写的不是懒加载的单例对象</span>                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                            <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>                <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>                <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Propagate exception to caller.</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>                <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>                <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个类中调用了onRefresh方法。去调用的父类的onRefresh()，同是调用了createWebServer(),创建了servlet的容器工厂getWebServerFactory。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">GenericWebApplicationContext</span>        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableWebServerApplicationContext</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 创建Servlet的容器工厂</span>            <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Unable to start web server"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        WebServer webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>        ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建了servlet容器工厂。</span>            ServletWebServerFactory factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建了对应的servlet容器</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize servlet context"</span><span class="token punctuation">,</span>                        ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the {@link ServletWebServerFactory} that should be used to create the     * embedded {@link WebServer}. By default this method searches for a suitable bean in     * the context itself.     * @return a {@link ServletWebServerFactory} (never {@code null})     */</span>    <span class="token keyword">protected</span> ServletWebServerFactory <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Use bean names so that we don't consider the hierarchy</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>ServletWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanNames<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span>                    <span class="token string">"Unable to start ServletWebServerApplicationContext due to missing "</span>                            <span class="token operator">+</span> <span class="token string">"ServletWebServerFactory bean."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanNames<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span>                    <span class="token string">"Unable to start ServletWebServerApplicationContext due to multiple "</span>                            <span class="token operator">+</span> <span class="token string">"ServletWebServerFactory beans : "</span>                            <span class="token operator">+</span> StringUtils<span class="token punctuation">.</span><span class="token function">arrayToCommaDelimitedString</span><span class="token punctuation">(</span>beanNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ServletWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这里将嵌入式的tomcat的工厂的设置配置和启动嵌入式的tomcat.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatServletWebServerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractServletWebServerFactory</span>        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableTomcatWebServerFactory</span><span class="token punctuation">,</span> ResourceLoaderAware <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> WebServer <span class="token function">getWebServer</span><span class="token punctuation">(</span>ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File baseDir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory                <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">setBaseDir</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connector connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">customizeConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">setConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureEngine</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector additionalConnector <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalTomcatConnectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>additionalConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getTomcatWebServer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">/**     * Factory method called to create the {@link TomcatWebServer}. Subclasses can     * override this method to return a different {@link TomcatWebServer} or apply     * additional processing to the Tomcat server.     * @param tomcat the Tomcat server.     * @return a new {@link TomcatWebServer} instance     */</span>    <span class="token keyword">protected</span> TomcatWebServer <span class="token function">getTomcatWebServer</span><span class="token punctuation">(</span>Tomcat tomcat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatWebServer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">,</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p>得到tomcat，然后启动。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatWebServer</span> <span class="token keyword">implements</span> <span class="token class-name">WebServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">TomcatWebServer</span><span class="token punctuation">(</span>Tomcat tomcat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Create a new {@link TomcatWebServer} instance.     * @param tomcat the underlying Tomcat server     * @param autoStart if the server should be started     */</span>    <span class="token keyword">public</span> <span class="token function">TomcatWebServer</span><span class="token punctuation">(</span>Tomcat tomcat<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">,</span> <span class="token string">"Tomcat Server must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tomcat <span class="token operator">=</span> tomcat<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>autoStart <span class="token operator">=</span> autoStart<span class="token punctuation">;</span>        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> WebServerException <span class="token punctuation">{</span>        TomcatWebServer<span class="token punctuation">.</span>logger                <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Tomcat initialized with port(s): "</span> <span class="token operator">+</span> <span class="token function">getPortsDescription</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>monitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">addInstanceIdToEngineName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Context context <span class="token operator">=</span> <span class="token function">findContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">addLifecycleListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token operator">&amp;&amp;</span> Lifecycle<span class="token punctuation">.</span>START_EVENT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Remove service connectors so that protocol binding doesn't</span>                        <span class="token comment" spellcheck="true">// happen when the service is started.</span>                        <span class="token function">removeServiceConnectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Start the server to trigger initialization listeners</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// We can re-throw failure exception directly in the main thread</span>                <span class="token function">rethrowDeferredStartupExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ContextBindings<span class="token punctuation">.</span><span class="token function">bindClassLoader</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getNamingToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Naming is not enabled. Continue</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Unlike Jetty, all Tomcat threads are daemon threads. We create a</span>                <span class="token comment" spellcheck="true">// blocking non-daemon to stop immediate shutdown</span>                <span class="token function">startDaemonAwaitThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">stopSilently</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WebServerException</span><span class="token punctuation">(</span><span class="token string">"Unable to start embedded Tomcat"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>TomcatServletWebServerFactory创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><p><strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.webServer = factory.getWebServer(getSelfInitializer());</p><p>嵌入式的Servlet容器创建对象并启动Servlet容器；</p><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>IOC容器启动创建嵌入式的Servlet容器</strong></p><h3 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h3><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>​        优点：简单、便携；</p><p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p><p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1、必须创建一个war项目；（利用idea创建好目录结构）</p><p>2、将嵌入式的Tomcat指定为provided；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder application<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//传入SpringBoot应用的主程序</span>      <span class="token keyword">return</span> application<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>SpringBoot04WebJspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、启动服务器就可以使用</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p><p>servlet3.0（Spring注解版）：</p><p>8.2.4 Shared libraries / runtimes pluggability：</p><p>规则：</p><p>​    1、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p><p>​    2、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p><p>​    3、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p><p>流程：</p><p>1、启动Tomcat</p><p>2、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span>WebApplicationInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServletContainerInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Delegate the {@code ServletContext} to any {@link WebApplicationInitializer}     * implementations present on the application classpath.     * &lt;p>Because this class declares @{@code HandlesTypes(WebApplicationInitializer.class)},     * Servlet 3.0+ containers will automatically scan the classpath for implementations     * of Spring's {@code WebApplicationInitializer} interface and provide the set of all     * such types to the {@code webAppInitializerClasses} parameter of this method.     * &lt;p>If no {@code WebApplicationInitializer} implementations are found on the classpath,     * this method is effectively a no-op. An INFO-level log message will be issued notifying     * the user that the {@code ServletContainerInitializer} has indeed been invoked but that     * no {@code WebApplicationInitializer} implementations were found.     * &lt;p>Assuming that one or more {@code WebApplicationInitializer} types are detected,     * they will be instantiated (and &lt;em>sorted&lt;/em> if the @{@link     * org.springframework.core.annotation.Order @Order} annotation is present or     * the {@link org.springframework.core.Ordered Ordered} interface has been     * implemented). Then the {@link WebApplicationInitializer#onStartup(ServletContext)}     * method will be invoked on each instance, delegating the {@code ServletContext} such     * that each instance may register and configure servlets such as Spring's     * {@code DispatcherServlet}, listeners such as Spring's {@code ContextLoaderListener},     * or any other Servlet API componentry such as filters.     * @param webAppInitializerClasses all implementations of     * {@link WebApplicationInitializer} found on the application classpath     * @param servletContext the servlet context to be initialized     * @see WebApplicationInitializer#onStartup(ServletContext)     * @see AnnotationAwareOrderComparator     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> webAppInitializerClasses<span class="token punctuation">,</span> ServletContext servletContext<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>WebApplicationInitializer<span class="token operator">></span> initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>webAppInitializerClasses <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> waiClass <span class="token operator">:</span> webAppInitializerClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Be defensive: Some servlet containers provide us with invalid classes,</span>                <span class="token comment" spellcheck="true">// no matter what @HandlesTypes says...</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        WebApplicationInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        initializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>WebApplicationInitializer<span class="token punctuation">)</span>                                ReflectionUtils<span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"Failed to instantiate WebApplicationInitializer class"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"No Spring WebApplicationInitializer types detected on classpath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Spring WebApplicationInitializers detected on classpath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WebApplicationInitializer initializer <span class="token operator">:</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p><p>3、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p><p>4、每一个WebApplicationInitializer都调用自己的onStartup；</p><p><img src="image/1537282448826.png" alt="1537282448826"></p><p>5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p><p>6、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Log logger<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Don't initialize early</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> registerErrorPageFilter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Set if the {@link ErrorPageFilter} should be registered. Set to {@code false} if     * error page mappings should be handled via the server and not Spring Boot.     * @param registerErrorPageFilter if the {@link ErrorPageFilter} should be registered.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setRegisterErrorPageFilter</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> registerErrorPageFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registerErrorPageFilter <span class="token operator">=</span> registerErrorPageFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Logger initialization is deferred in case an ordered</span>        <span class="token comment" spellcheck="true">// LogServletContextInitializer is being used</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WebApplicationContext rootAppContext <span class="token operator">=</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span>                servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootAppContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span>rootAppContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// no-op because the application context is already initialized</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No ContextLoaderListener registered, as "</span>                    <span class="token operator">+</span> <span class="token string">"createRootApplicationContext() did not "</span>                    <span class="token operator">+</span> <span class="token string">"return an application context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> WebApplicationContext <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span>            ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplicationBuilder builder <span class="token operator">=</span> <span class="token function">createSpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ApplicationContext parent <span class="token operator">=</span> <span class="token function">getExistingRootWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root context already created (using as parent)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>                    WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParentContextApplicationContextInitializer</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ServletContextApplicationContextInitializer</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">contextClass</span><span class="token punctuation">(</span>AnnotationConfigServletWebServerApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder <span class="token operator">=</span> <span class="token function">configure</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">listeners</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebEnvironmentPropertySourceInitializer</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SpringApplication application <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getAllSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> AnnotationUtils                <span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            application<span class="token punctuation">.</span><span class="token function">addPrimarySources</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token operator">!</span>application<span class="token punctuation">.</span><span class="token function">getAllSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"No SpringApplication sources have been defined. Either override the "</span>                        <span class="token operator">+</span> <span class="token string">"configure method or add an @Configuration annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Ensure error pages are registered</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerErrorPageFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            application<span class="token punctuation">.</span><span class="token function">addPrimarySources</span><span class="token punctuation">(</span>                    Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span>ErrorPageFilterConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 执行run方法</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h2><h3 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h3><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src="image/搜狗截图20180303145450.png" alt="搜狗截图20180303145450"></p><p><img src="image/搜狗截图20180303145531.png" alt="搜狗截图20180303145531"></p><h3 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h3><p>docker主机(Host)：安装了Docker程序的机器(Docker直接安装在操作系统之上)</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p><img src="image/搜狗截图20180303165113.png" alt="搜狗截图20180303165113"></p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器</p><p>4）、对容器的启动停止就是对软件的启动停止</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
